<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KGO Engineering Project Calculator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        .main-layout {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 15px;
            height: calc(100vh - 200px);
        }
        
        /* Adjust layout when header is hidden in landscape */
        @media (orientation: landscape) and (max-width: 1000px) {
            .main-layout {
                height: calc(100vh - 100px) !important;
                margin-top: 0px !important;
            }
        }
        
        /* Mobile responsive design */
        @media (max-width: 768px) {
            .main-layout {
                grid-template-columns: 1fr;
                gap: 15px;
                margin-top: 15px;
                height: auto;
            }
            
            .container {
                max-width: 100%;
                padding: 10px;
                margin: 0;
                border-radius: 0;
            }
            
            .project-header {
                padding: 15px 10px;
            }
            
            .header-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .results-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 6px;
            }
            
            .result-card {
                padding: 8px;
                margin-bottom: 4px;
            }
            
            .result-card h4 {
                font-size: 12px;
                margin-bottom: 4px;
            }
            
            .result-value {
                font-size: 14px;
                margin-bottom: 2px;
            }
            
            .result-detail {
                font-size: 10px;
            }
            
            .input-group {
                padding: 12px;
                margin-bottom: 12px;
            }
            
            .section-header {
                font-size: 16px;
                margin-bottom: 12px;
            }
            
            .line-item {
                flex-direction: column;
                gap: 8px;
                align-items: stretch;
            }
            
            .line-item input,
            .line-item select:not(.cable-type) {
                width: 100%;
                padding: 8px;
                font-size: 14px;
            }
            
            /* Special mobile layout for cable configuration inputs */
            #averageLengthMode .line-item {
                display: flex;
                flex-direction: row;
                gap: 10px;
                align-items: center;
            }
            
            #averageLengthMode .line-item .cable-type {
                width: 60px !important;
                min-width: 60px;
            }
            
            #averageLengthMode .line-item input {
                width: 60px;
                min-width: 60px;
                text-align: center;
            }
            
            #averageLengthMode .line-item .avg-length-input {
                width: 100px !important;
                min-width: 100px;
            }
            
            /* Special mobile layout for calculated length mode */
            #calculatedLengthMode .cable-line-item {
                display: flex;
                flex-direction: row;
                gap: 10px;
                align-items: center;
            }
            
            #calculatedLengthMode .cable-line-item .cable-type {
                width: 80px !important;
                min-width: 80px !important;
                flex: none !important;
            }
            
            #calculatedLengthMode .cable-line-item input {
                width: 60px;
                min-width: 60px;
                text-align: center;
            }
            
            #calculatedLengthMode .cable-line-item .cable-length {
                width: 80px !important;
                min-width: 80px;
            }
            
            /* Hide header row on mobile to save space */
            #calculatedLengthMode .cable-header-row,
            #averageLengthMode .cable-header-row {
                display: none !important;
            }
            
            /* Special handling for cable line items to keep them horizontal on mobile */
            .cable-line-item {
                flex-direction: row !important;
                flex-wrap: wrap;
                gap: 5px;
                align-items: center;
            }
            
            .cable-line-item .cable-type,
            #calculatedLengthMode .cable-type {
                width: 80px !important;
                min-width: 80px !important;
                flex: none !important;
            }
            
            .cable-line-item .cable-qty {
                width: 60px !important;
                min-width: 60px;
            }
            
            /* Cable type styling with color coding */
            .cable-type {
                font-size: 14px !important;
                font-weight: 600 !important;
                border: 2px solid #ddd !important;
                border-radius: 4px !important;
                padding: 4px !important;
                width: 80px !important;
                min-width: 80px !important;
            }
            
            /* Color coding for cable types */
            .cable-type option[value="1855"] {
                background-color: #e8f5e8;
                color: #2e7d32;
            }
            
            .cable-type option[value="1505"] {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            
            .cable-type option[value="1694"] {
                background-color: #fff3e0;
                color: #f57c00;
            }
            
            .cable-type option[value="cat6"] {
                background-color: #f3e5f5;
                color: #7b1fa2;
            }
            
            .cable-type option[value="other"] {
                background-color: #fafafa;
                color: #424242;
            }
            
            /* Dynamic border colors based on selected value */
            .cable-type[data-value="1855"] {
                border-color: #2e7d32 !important;
                background-color: #e8f5e8;
                color: #2e7d32;
            }
            
            .cable-type[data-value="1505"] {
                border-color: #1976d2 !important;
                background-color: #e3f2fd;
                color: #1976d2;
            }
            
            .cable-type[data-value="1694"] {
                border-color: #f57c00 !important;
                background-color: #fff3e0;
                color: #f57c00;
            }
            
            .cable-type[data-value="cat6"] {
                border-color: #7b1fa2 !important;
                background-color: #f3e5f5;
                color: #7b1fa2;
            }
            
            .cable-type[data-value="other"] {
                border-color: #424242 !important;
                background-color: #fafafa;
                color: #424242;
            }
            
            .cable-line-item .cable-length {
                width: 80px !important;
                min-width: 80px;
            }
            
            .cable-line-item button {
                width: 30px !important;
                min-width: 30px;
                height: 30px;
                padding: 0;
                margin-left: 5px;
            }
            
            .setup-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .setup-item {
                flex-direction: column;
                align-items: stretch;
            }
            
            .setup-item label {
                margin-bottom: 5px;
                font-size: 14px;
            }
            
            .setup-item input {
                width: 100%;
                padding: 8px;
                font-size: 14px;
            }
            
            .toggle-group {
                flex-direction: column;
                gap: 8px;
            }
            
            .toggle-btn {
                padding: 10px;
                font-size: 14px;
            }
            
            .labor-split {
                flex-direction: column;
                gap: 15px;
            }
            
            .split-section {
                width: 100%;
            }
            
            .vendor-name-row {
                flex-direction: column;
                gap: 8px;
                align-items: stretch;
            }
            
                    .vendor-active-toggle {
            width: 100%;
            text-align: center;
            padding: 8px;
        }
        
        .vendor-status {
            margin-left: 8px;
            font-size: 12px;
        }
        
        .active-status {
            color: #27ae60;
        }
        
        .inactive-status {
            color: #95a5a6;
        }
            
            .add-item-btn {
                width: 100%;
                padding: 10px;
                font-size: 14px;
                margin-top: 10px;
            }
            
            .save-btn, .load-btn, .reset-btn {
                width: 100%;
                margin: 5px 0;
                padding: 12px;
                font-size: 14px;
            }
            
            .control-buttons {
                flex-direction: column;
                gap: 8px;
            }
            
            h2 {
                font-size: 20px;
                margin-bottom: 15px;
            }
            
            h3 {
                font-size: 18px;
            }
            
            /* Make charts responsive */
            .chart-container {
                width: 100%;
                height: 300px;
            }
            
            /* Improve touch targets */
            button {
                min-height: 44px;
            }
            
            input, select {
                min-height: 44px;
            }
            
            /* Additional mobile improvements */
            .alert {
                padding: 12px;
                margin: 10px 0;
                font-size: 14px;
                line-height: 1.4;
            }
            
            .time-breakdown {
                font-size: 14px;
            }
            
            .time-breakdown div {
                padding: 8px 0;
            }
            
            /* Improve scrolling on mobile */
            .left-panel, .right-panel {
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            /* Better spacing for mobile */
            .results {
                margin-bottom: 20px;
            }
            
            /* Make sure buttons don't overlap */
            .control-buttons button {
                margin-bottom: 8px;
            }
            
            /* Mobile landscape optimizations */
            @media (max-width: 900px) and (orientation: landscape) {
                .project-header {
                    display: none !important;
                }
                
                .container {
                    padding: 6px !important;
                }
                
                .main-layout {
                    margin-top: 0px !important;
                    gap: 8px !important;
                    height: calc(100vh - 80px) !important;
                    min-height: 250px !important;
                }
                
                /* Make panels use full available height */
                .left-panel, .right-panel {
                    height: 100% !important;
                    overflow-y: auto !important;
                }
                
                .input-group {
                    padding: 6px !important;
                    margin-bottom: 6px !important;
                }
                
                .section-header {
                    font-size: 12px !important;
                    margin-bottom: 6px !important;
                }
                
                .results-grid {
                    grid-template-columns: repeat(3, 1fr) !important;
                    gap: 3px !important;
                }
                
                .result-card {
                    padding: 4px !important;
                    margin-bottom: 2px !important;
                }
                
                .result-card h4 {
                    font-size: 9px !important;
                    margin-bottom: 2px !important;
                }
                
                .result-value {
                    font-size: 11px !important;
                    margin-bottom: 1px !important;
                }
                
                .result-detail {
                    font-size: 7px !important;
                }
                
                h2 {
                    font-size: 14px !important;
                    margin-bottom: 8px !important;
                }
                
                .results h2 {
                    font-size: 16px !important;
                    margin-bottom: 6px !important;
                }
                
                h3 {
                    font-size: 12px !important;
                }
            }
            
            /* Additional landscape optimizations for smaller screens */
            @media (max-width: 800px) and (orientation: landscape) {
                .project-header {
                    display: none !important;
                }
                
                .container {
                    padding: 4px !important;
                }
                
                .main-layout {
                    margin-top: 0px !important;
                    gap: 6px !important;
                    height: calc(100vh - 60px) !important;
                    min-height: 200px !important;
                }
                
                /* Make panels use full available height */
                .left-panel, .right-panel {
                    height: 100% !important;
                    overflow-y: auto !important;
                }
                
                .input-group {
                    padding: 4px !important;
                    margin-bottom: 4px !important;
                }
                
                .section-header {
                    font-size: 10px !important;
                    margin-bottom: 4px !important;
                }
                
                .results h2 {
                    font-size: 14px !important;
                    margin-bottom: 4px !important;
                }
            }
        }
        
        .left-panel {
            display: flex;
            flex-direction: column;
            gap: 15px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .right-panel {
            display: flex;
            flex-direction: column;
            gap: 15px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.2em;
            font-weight: 600;
        }
        
        .results h2 {
            margin-bottom: 10px;
            font-size: 18px;
        }
        
        .input-grid {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .input-group {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            border-left: 4px solid #3498db;
        }
        
        .input-group h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.1em;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }
        
        input, select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .toggle-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .toggle-btn {
            flex: 1;
            padding: 8px 12px;
            border: 2px solid #3498db;
            background: #fff;
            color: #3498db;
            border-radius: 6px;
            cursor: pointer;
            text-align: center;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .toggle-btn.active {
            background: #3498db;
            color: white;
        }
        
        .preset-selector {
            margin-bottom: 15px;
        }
        
        .labor-split {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 15px;
        }
        
        .split-section {
            background: #e8f4fd;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #b3d9ff;
        }
        
        .split-section h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 0.9em;
        }
        
        .results {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
        }
        
        .results h2 {
            text-align: center;
            margin-bottom: 25px;
            font-size: 18px;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
        }
        
        .result-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 12px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
        }
        
        .result-card h4 {
            color: #3498db;
            margin-bottom: 6px;
            font-size: 0.9em;
        }
        
        .result-value {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 3px;
        }
        
        .result-detail {
            font-size: 0.75em;
            opacity: 0.8;
        }
        
        .breakdown {
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            border: 2px solid #3498db;
        }
        
        .breakdown h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            cursor: pointer;
            user-select: none;
            padding: 10px;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .breakdown h3::after {
            content: "▼";
            font-size: 12px;
            transition: transform 0.3s ease;
        }
        
        .breakdown.collapsed h3::after {
            transform: rotate(-90deg);
        }
        
        .breakdown.collapsed .breakdown-item {
            display: none;
        }
        
        .breakdown-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 5px 0;
            border-bottom: 1px solid #bdc3c7;
            color: #2c3e50;
            font-weight: 500;
        }
        
        .equipment-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .equipment-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .equipment-item label {
            margin-bottom: 0;
            flex: 1;
        }
        
        .equipment-item input {
            width: 80px;
            margin-left: 10px;
        }
        
        /* Help Modal Styles */
        .help-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .help-modal-content {
            background: white;
            border-radius: 10px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        
        .help-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
            background: #f8f9fa;
            border-radius: 10px 10px 0 0;
        }
        
        .help-modal-header h3 {
            margin: 0;
            color: #2c3e50;
        }
        
        .help-modal-body {
            padding: 20px;
            color: #2c3e50;
        }
        
        .help-modal-body h4 {
            color: #3498db;
            margin-top: 20px;
            margin-bottom: 10px;
        }
        
        .help-modal-body ul,
        .help-modal-body ol {
            margin-left: 20px;
        }
        
        .help-modal-body li {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        
        .project-header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .header-value {
            font-size: 18px;
            font-weight: 600;
            line-height: 1.2;
            color: white;
        }
        
        /* Mobile responsive layout for screens < 768x800 */
        @media (max-width: 768px), (max-height: 800px) {
            .container {
                padding: 4px !important;
            }
            
            .main-layout {
                display: flex !important;
                flex-direction: column !important;
                gap: 6px !important;
            }
            
            .left-panel {
                order: 1 !important;
                flex-direction: column !important;
                gap: 4px !important;
            }
            
            .right-panel {
                order: 2 !important;
            }
            
            /* Move header to bottom on mobile */
            .project-header {
                order: 3 !important;
                margin-top: 8px !important;
                margin-bottom: 0 !important;
                padding: 6px !important;
                background: #f8f9fa !important;
                border-radius: 8px !important;
                border: 1px solid #dee2e6 !important;
            }
            
            /* Compact header layout for mobile */
            .project-header > div {
                flex-direction: column !important;
                gap: 4px !important;
            }
            
            .project-header .header-item {
                min-width: auto !important;
                margin-bottom: 5px !important;
            }
            
            .project-header .header-display {
                min-width: auto !important;
                margin-bottom: 5px !important;
            }
            
            .project-header .header-value {
                font-size: 14px !important;
                font-weight: 600 !important;
                color: white !important;
            }
            
            .project-header button {
                width: auto !important;
                margin: 2px !important;
                padding: 4px 8px !important;
                font-size: 10px !important;
                min-height: 24px !important;
            }
            
            /* Make Summary and Time Breakdown collapsible with better visual separation */
            .results, .breakdown {
                border: 2px solid #3498db !important;
                border-radius: 10px !important;
                margin-bottom: 8px !important;
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%) !important;
                box-shadow: 0 2px 8px rgba(52, 152, 219, 0.1) !important;
            }
            
            .results h2, .breakdown h3 {
                cursor: pointer !important;
                user-select: none !important;
                padding: 8px 12px !important;
                margin: 0 !important;
                color: white !important;
                border-radius: 8px 8px 0 0 !important;
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                font-weight: 600 !important;
                font-size: 16px !important;
            }
            
                    /* Ensure Time Breakdown header has proper contrast */
        .breakdown h3 {
            background: #2c3e50 !important;
            color: white !important;
        }
        
        /* Reconciliation section styling */
        #reconciliationSection {
            background: #f8f9fa;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        #reconciliationSection h3 {
            padding: 15px 20px;
            margin: 0;
            background: #2c3e50 !important;
            color: white !important;
            border-radius: 10px 10px 0 0;
            cursor: pointer;
            user-select: none;
            transition: all 0.3s ease;
        }
        
        #reconciliationSection h3:hover {
            background: #34495e !important;
        }
        
        .breakdown-content {
            padding: 20px;
        }
        
        #reconciliationStatus {
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
            
            .results h2::after, .breakdown h3::after {
                content: "▼" !important;
                font-size: 14px !important;
                transition: transform 0.3s ease !important;
                font-weight: bold !important;
            }
            
            .results.collapsed h2::after, .breakdown.collapsed h3::after {
                transform: rotate(-90deg) !important;
            }
            
            .results .results-grid, .breakdown .breakdown-item {
                padding: 10px !important;
                background: white !important;
                color: #2c3e50 !important;
            }
            
            .results.collapsed .results-grid, .breakdown.collapsed .breakdown-item {
                display: none !important;
            }
            
            /* Remove scroll indicator - no longer needed */
            
            /* Make Project control buttons match header button size */
            .left-panel > div:last-child button {
                padding: 8px 16px !important;
                font-size: 13px !important;
                border-radius: 6px !important;
            }
            
            /* Adjust control buttons for mobile */
            .left-panel > div:last-child {
                order: 4 !important;
                margin-top: 4px !important;
                padding: 6px !important;
                background: #f8f9fa !important;
                border-radius: 8px !important;
                border: 1px solid #dee2e6 !important;
            }
            
            /* Hide chart buttons on mobile */
            .left-panel > div:last-child button {
                display: none !important;
            }
            
            /* Make header sticky to bottom on mobile when scrolled */
            .project-header {
                position: sticky !important;
                bottom: 0 !important;
                z-index: 1000 !important;
                background: white !important;
                border-top: 2px solid #3498db !important;
                margin-top: 0 !important;
                box-shadow: 0 -2px 10px rgba(0,0,0,0.1) !important;
            }
            
            /* Optimize result cards for mobile */
            .results-grid {
                grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)) !important;
                gap: 8px !important;
            }
            
            .result-card {
                padding: 8px !important;
                border: 1px solid #e9ecef !important;
                border-radius: 6px !important;
            }
            
            .result-card h4 {
                font-size: 11px !important;
                margin-bottom: 4px !important;
            }
            
            .result-value {
                font-size: 14px !important;
            }
            
            .result-detail {
                font-size: 10px !important;
            }
            
            /* Optimize breakdown items for mobile */
            .breakdown-item {
                padding: 8px 12px !important;
                font-size: 12px !important;
                border-bottom: 1px solid #f1f3f4 !important;
            }
            
            .breakdown-item:last-child {
                border-bottom: none !important;
            }
            
            /* Optimize input sections for mobile */
            .input-group {
                padding: 8px !important;
                margin-bottom: 6px !important;
            }
            
            .section-header {
                font-size: 14px !important;
                margin-bottom: 6px !important;
                color: #2c3e50 !important;
                background: #f8f9fa !important;
                padding: 6px 8px !important;
                border-radius: 6px !important;
                border: 1px solid #dee2e6 !important;
            }
            
            /* Ensure proper spacing on very small screens */
            @media (max-width: 480px) {
                .container {
                    padding: 3px !important;
                }
                
                .main-layout {
                    gap: 4px !important;
                }
                
                .results-grid {
                    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)) !important;
                    gap: 6px !important;
                }
                
                .result-card {
                    padding: 6px !important;
                }
                
                .result-card h4 {
                    font-size: 10px !important;
                }
                
                .result-value {
                    font-size: 12px !important;
                }
                
                .result-detail {
                    font-size: 9px !important;
                }
                
                .project-header {
                    padding: 4px !important;
                }
                
                            .project-header button {
                padding: 3px 6px !important;
                font-size: 9px !important;
                min-height: 20px !important;
            }
            }
        }
        

        
        /* Landscape-specific header optimization */
        .project-header.landscape-compact {
            display: none !important;
        }
        
        /* Force hide header in landscape mode */
        @media (orientation: landscape) and (max-width: 1000px) {
            .project-header {
                display: none !important;
            }
            
            .container {
                padding: 10px !important;
            }
            
            .main-layout {
                margin-top: 0px !important;
                height: calc(100vh - 100px) !important;
                min-height: 300px !important;
            }
            
            /* Make panels use full available height */
            .left-panel, .right-panel {
                height: 100% !important;
                overflow-y: auto !important;
            }
        }
        
        .header-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 10px 0;
        }
        
        .header-item label {
            display: block;
            margin-bottom: 3px;
            color: #bdc3c7;
            font-size: 13px;
        }
        
        .header-item input {
            width: 100%;
            padding: 6px 10px;
            border: 1px solid #34495e;
            border-radius: 4px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 13px;
        }
        
        .header-item input::placeholder {
            color: #95a5a6;
        }
        
        .header-display {
            color: white;
            font-size: 13px;
        }
        
        .header-display strong {
            color: white;
            font-weight: 600;
        }
        
        .header-display span {
            color: white;
            font-weight: 500;
        }
        
        .save-btn, .load-btn, .reset-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            margin: 0 10px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s ease;
        }
        
        .reset-btn {
            background: #e74c3c;
        }
        
        .save-btn:hover, .load-btn:hover, .reset-btn:hover {
            background: #2980b9;
        }
        
        .section-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            transition: color 0.3s ease;
        }
        
        .section-header:hover {
            color: #3498db;
        }
        
        .toggle-icon {
            margin-right: 8px;
            font-size: 12px;
            transition: transform 0.3s ease;
        }
        
        .section-content {
            transition: all 0.3s ease;
            overflow: hidden;
            max-height: 0;
            opacity: 0;
            margin-bottom: 0;
        }
        
        .section-content.expanded {
            max-height: 1000px;
            opacity: 1;
            margin-bottom: 15px;
        }
        
        .section-header {
            transform: rotate(0deg);
        }
        
        .section-header.expanded .toggle-icon {
            transform: rotate(0deg);
        }
        
        .section-header .toggle-icon {
            transform: rotate(-90deg);
        }
        
        .input-group {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .input-group:nth-child(even) {
            background: #ffffff;
        }
        
        .line-item {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }
        
        .line-item input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .line-item button {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .add-item-btn {
            background: #27ae60;
            color: #888;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 10px;
            font-size: 14px;
        }
        
        .add-item-btn:hover {
            background: #229954;
        }
        
        .vendor-details {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
            border: 1px solid #e0e0e0;
        }
        
        .vendor-details label {
            margin-bottom: 5px;
        }
        
        .vendor-details input[type="checkbox"] {
            width: auto;
            margin-right: 8px;
        }
        
        .toggle-btn.active {
            background: #3498db;
            color: white;
            position: relative;
        }
        
        .toggle-btn.active::after {
            content: '';
            position: absolute;
            bottom: -3px;
            left: 0;
            right: 0;
            height: 3px;
            background: #27ae60;
            border-radius: 0 0 6px 6px;
        }
        
        .vendor-name-row {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .vendor-name-row label {
            margin-bottom: 0;
            min-width: 120px;
        }
        
        .vendor-name-row input[type="text"] {
            flex: 1;
        }
        
        .vendor-active-toggle {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid #ddd;
            min-width: 100px;
            text-align: center;
        }
        
        .vendor-active-toggle.active {
            background: #27ae60;
            color: white;
            border-color: #27ae60;
        }
        
        .vendor-active-toggle.inactive {
            background: #e74c3c;
            color: white;
            border-color: #e74c3c;
        }
        
        .setup-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .setup-item {
            display: flex;
            flex-direction: column;
        }
        
        .setup-item label {
            margin-bottom: 5px;
        }
        
        .updating {
            background: #fff3cd !important;
            transition: background-color 0.3s ease;
        }
        

    </style>
</head>
<body>
            <div class="container">
        <!-- Project Header Display -->
        <div class="project-header">
            <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;">
                <div style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
                    <div class="header-display" style="min-width: 150px;">
                        <span id="projectNameDisplay" class="header-value"></span>
                    </div>
                    <div class="header-display" style="min-width: 150px;">
                        <span id="projectDescriptionDisplay" class="header-value"></span>
                    </div>
                    <div class="header-display" style="min-width: 100px;">
                        <span id="projectRevisionDisplay" class="header-value"></span>
                    </div>
                    <div class="header-display" style="min-width: 120px;">
                        <span id="projectDateDisplay" class="header-value"></span>
                    </div>
                </div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button onclick="exportCSV()" style="background: #27ae60; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📄 Export CSV</button>
                    <button onclick="saveProject()" style="background: #3498db; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">💾 Save Project</button>
                    <button onclick="loadProject()" style="background: #f39c12; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📂 Load Project</button>
                </div>
            </div>
        </div>
        <input type="file" id="projectFile" accept=".json" style="display: none;" onchange="importProject(event)">
        
        <div class="main-layout">
            <!-- Left Panel: Results and Controls -->
            <div class="left-panel">
                <!-- Project Summary -->
        <div class="results" id="results">
            <h2 onclick="toggleMobileSection('results')" style="cursor: pointer; user-select: none;">📊 Project Summary</h2>
            <div class="results-grid">
                        <div class="result-card">
                            <h4>🔌 Total Cables</h4>
                            <div class="result-value" id="totalCables">1</div>
                            <div class="result-detail">cables to install</div>
                        </div>
                        
                <div class="result-card">
                    <h4>🔌 Total Terminations</h4>
                    <div class="result-value" id="totalTerminations">2</div>
                    <div class="result-detail">connections to complete</div>
                </div>
                
                <div class="result-card">
                    <h4>⏱️ Termination Time</h4>
                    <div class="result-value" id="terminationHours">0.05 hrs</div>
                    <div class="result-detail" id="terminationDetails">3.0 minutes</div>
                </div>
                
                <div class="result-card">
                    <h4>📅 Project Duration</h4>
                    <div class="result-value" id="projectDays">0.6 days</div>
                    <div class="result-detail" id="totalHours">5 total hours</div>
                </div>
                
                <div class="result-card">
                    <h4>💰 Labor Cost</h4>
                    <div class="result-value" id="laborCost">$375</div>
                    <div class="result-detail" id="laborDetails">2 techs × 2.5 hrs × $75/hr</div>
                </div>
                

                        
                        <div class="result-card">
                            <h4>📦 Supplies & Expendables</h4>
                            <div class="result-value" id="equipmentCost">$0</div>
                            <div class="result-detail">additional materials and supplies</div>
                        </div>
                        
                        <div class="result-card">
                            <h4>📋 Vendor Quotes</h4>
                            <div class="result-value" id="vendorQuotesTotal">$0</div>
                            <div class="result-detail">total vendor quotes</div>
                        </div>
                        
                        <div class="result-card">
                            <h4>🏷️ Orders</h4>
                            <div class="result-value" id="activeVendorTotal">$0</div>
                            <div class="result-detail">active vendor pricing items</div>
                        </div>
                        
                        
                        
                        <div class="result-card">
                            <h4>👥 Staff Hours</h4>
                            <div class="result-value" id="staffHoursTotal">0.0</div>
                            <div class="result-detail">total staff hours</div>
                        </div>
                
                <div class="result-card">
                    <h4>📦 Cable Spools</h4>
                    <div class="result-value" id="spoolsRequired">1</div>
                    <div class="result-detail" id="spoolDetails">50ft needed + 7.5% waste</div>
                </div>
                
                <div class="result-card">
                    <h4>💵 Total Project Cost</h4>
                            <div class="result-value" id="totalCost">$550</div>
                            <div class="result-detail">labor + supplies & expendables + vendor quotes + active vendor</div>
                </div>
            </div>
            
                </div>
                
                <!-- Time Breakdown -->
            <div class="breakdown" id="breakdown">
                <h3 onclick="toggleBreakdown()">🔍 Time Breakdown</h3>
                <div class="breakdown-item">
                    <span>Termination Work:</span>
                    <span id="breakdownTermination">0.05 hours</span>
                </div>
                <div class="breakdown-item">
                    <span>Cable Running:</span>
                    <span id="breakdownRunning">0.05 hours</span>
                </div>
                <div class="breakdown-item">
                    <span>Testing & Verification:</span>
                    <span id="breakdownTesting">0.03 hours</span>
                </div>
                    <div class="breakdown-item">
                        <span>Labeling:</span>
                        <span id="breakdownLabeling">0.01 hours</span>
                    </div>
                    <div class="breakdown-item">
                        <span>Cleanup:</span>
                        <span id="breakdownCleanup">0.5 hours</span>
                    </div>
                    <div class="breakdown-item">
                        <span>Cutover:</span>
                        <span id="breakdownCutover">1.5 hours</span>
                    </div>
                    <div class="breakdown-item">
                        <span>Decommissioning:</span>
                        <span id="breakdownDecommissioning">0.5 hours</span>
                    </div>
                <div class="breakdown-item">
                    <span>Rack Setup:</span>
                        <span id="breakdownRack">1.0 hours</span>
                </div>
                <div class="breakdown-item" style="border-top: 2px solid #2c3e50; margin-top: 10px; padding-top: 10px; color: #2c3e50;">
                    <strong>Total Project Time:</strong>
                        <strong id="breakdownTotal">3.6 hours</strong>
                </div>
            </div>
            
            <!-- Reconciliation Report -->
            <div class="breakdown" id="reconciliationSection">
                <h3 onclick="toggleReconciliation()" style="position: relative;">
                    🔄 Reconciliation Report
                    <span id="reconciliationStatus" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); font-size: 12px; padding: 2px 6px; border-radius: 10px; background: #95a5a6; color: white;">Not Run</span>
                </h3>
                <div id="reconciliationContent" class="breakdown-content" style="display: none;">
                    
                    <!-- Control Buttons -->
                    <div style="margin-bottom: 15px; display: flex; gap: 8px; flex-wrap: wrap;">
                        <button onclick="runReconciliationToTab()" style="background: #8e44ad; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">🔄 Run Report</button>
                        <button onclick="showReconciliationHistory()" style="background: #2980b9; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">📋 History</button>
                        <button onclick="exportReconciliationCSV()" style="background: #27ae60; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">📄 Export</button>
                    </div>
                    
                    <!-- Status Summary -->
                    <div id="reconciliationSummary" style="background: #f8f9fa; padding: 10px; border-radius: 6px; margin-bottom: 15px; border-left: 4px solid #3498db;">
                        <div style="font-weight: bold; margin-bottom: 5px;">Quick Status:</div>
                        <div id="reconciliationQuickStatus">Run reconciliation to see status</div>
                    </div>
                    
                    <!-- Detailed Report -->
                    <div id="reconciliationReport" style="background: white; border: 1px solid #ddd; border-radius: 6px; padding: 12px; font-family: monospace; font-size: 13px; white-space: pre-wrap; max-height: 300px; overflow-y: auto;">
                        Click "Run Report" to generate reconciliation data...
                    </div>
                    
                    <!-- History View -->
                    <div id="reconciliationHistoryView" style="display: none;">
                        <h4 style="margin: 15px 0 10px 0; font-size: 14px;">Recent Reconciliations:</h4>
                        <div id="reconciliationHistoryList" style="background: white; border: 1px solid #ddd; border-radius: 6px; padding: 12px; font-family: monospace; font-size: 13px; white-space: pre-wrap; max-height: 250px; overflow-y: auto;">
                            No history available
                        </div>
                    </div>
                </div>
            </div>
            
                <!-- Chart Container -->
                <div id="chartContainer" style="display: none; background: white; padding: 20px; border-radius: 10px; border: 2px solid #3498db;">
    
                <div style="text-align: center;">
                    <canvas id="projectChart" width="600" height="400" style="max-width: 100%; border: 1px solid #ddd;"></canvas>
                </div>
                <button onclick="hideChart()" style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 6px; margin-top: 15px; cursor: pointer;">Hide Chart</button>
            </div>
                
                <!-- Control Buttons -->
                <div style="text-align: center; padding: 20px; background: #f8f9fa; border-radius: 10px;">
                    <button onclick="showChart()" style="background: #3498db; color: white; border: none; padding: 12px 20px; border-radius: 8px; margin: 5px; cursor: pointer; font-size: 14px;">📊 Show Time Chart</button>
                    <button onclick="showCostChart()" style="background: #e67e22; color: white; border: none; padding: 12px 20px; border-radius: 8px; margin: 5px; cursor: pointer; font-size: 14px;">💰 Show Cost Chart</button>
                </div>
            </div>
            
            <!-- Right Panel: Input Fields -->
            <div class="right-panel">
                <div class="input-grid">
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('cableConfig')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 📡 Cable Configuration
                </h3>
                <div id="cableConfig" class="section-content">
                <div class="toggle-group" style="margin-top: 15px;">
                    <div class="toggle-btn active" onclick="setCableLengthMode('average', event)">Average Length</div>
                    <div class="toggle-btn" onclick="setCableLengthMode('calculated', event)">Calculated Quantity and Length</div>
                </div>
                
                <div id="averageLengthMode">
                    <div class="cable-header-row" style="display: flex; gap: 10px; margin-bottom: 10px; font-weight: 500; font-size: 14px; color: #2c3e50;">
                        <div style="width: 60px; text-align: center;">Type</div>
                        <div style="width: 60px; text-align: center;">Qty</div>
                        <div style="width: 100px; text-align: center;">Avg Length (ft)</div>
                    </div>
                    <div class="line-item">
                        <select class="cable-type" data-value="1855" onchange="calculate(); updateCableTypeColor(this)">
                            <option value="1855">1855</option>
                            <option value="1505">1505</option>
                            <option value="1694">1694</option>
                            <option value="cat6">Cat6</option>
                            <option value="other">Other</option>
                        </select>
                        <input type="number" id="numCables" min="1" oninput="calculate()" onchange="calculate()" class="avg-length-input">
                        <input type="number" id="avgCableLength" min="1" oninput="calculate()" onchange="calculate()" class="avg-length-input">
                    </div>
                </div>
                
                <div id="calculatedLengthMode" style="display: none;">
                    <div id="cableLengths">
                        <div class="cable-header-row" style="display: flex; gap: 10px; margin-bottom: 10px; font-weight: 500; font-size: 14px; color: #2c3e50;">
                            <div style="width: 60px; text-align: center;">Type</div>
                            <div style="width: 60px; text-align: center;">Qty</div>
                            <div style="width: 80px; text-align: center;">Length (ft)</div>
                            <div style="width: 30px;"></div>
                        </div>
                        <div class="line-item cable-line-item">
                            <select class="cable-type" data-value="1855" onchange="calculate(); updateCableTypeColor(this)">
                                <option value="1855">1855</option>
                                <option value="1505">1505</option>
                                <option value="1694">1694</option>
                                <option value="cat6">Cat6</option>
                                <option value="other">Other</option>
                            </select>
                            <input type="number" placeholder="Qty" class="cable-qty" min="1" style="width: 60px;" oninput="calculate()" onchange="calculate()">
                            <input type="number" placeholder="Length" class="cable-length" min="1" style="width: 80px;" oninput="calculate()" onchange="calculate()">
                            <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                        </div>
                    </div>
                    <button onclick="addCableLength()" class="add-item-btn">➕</button>
                    
                    <div style="margin-top: 15px; padding: 10px; background: #e8f4fd; border-radius: 6px; border-left: 3px solid #3498db;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-weight: 500; color: #2c3e50;">Total Cables:</span>
                            <span id="calculatedTotalCables" style="font-weight: bold; color: #3498db;">0</span>
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 5px;">
                            <span style="font-weight: 500; color: #2c3e50;">Total Length:</span>
                            <span id="calculatedTotalLength" style="font-weight: bold; color: #3498db;">0 ft</span>
                        </div>
                    </div>
                </div>
                </div>
            </div>
            

            

            
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('materialsEquipment')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 🧰 Supplies and Expendables
                </h3>
                <div id="materialsEquipment" class="section-content">
                <div style="margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">
                    <button onclick="showHelp('supplies')" style="background: #3498db; color: white; border: none; padding: 4px 8px; border-radius: 50%; cursor: pointer; font-size: 12px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">?</button>
                </div>
                
                <div id="otherMaterials">
                    <div class="line-item">
                        <input type="text" placeholder="Description" class="other-material-desc" style="flex: 3;">
                        <input type="number" placeholder="Qty" class="other-material-qty" min="1" value="1" oninput="calculate()" onchange="calculate()" style="width: 60px;">
                        <div style="position: relative; display: inline-block; width: 100px;">
                            <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                            <input type="number" placeholder="Amount" class="other-material-amount" step="0.01" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;">
                        </div>
                        <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                    </div>
                </div>
                <button onclick="addOtherMaterial()" class="add-item-btn">➕</button>
                </div>
            </div>
            

            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('vendorPricing')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 🏷️ Vendor Orders
                </h3>
                <div id="vendorPricing" class="section-content">
                <div class="toggle-group">
                    <div class="toggle-btn active" onclick="setVendor(1, event)">
                        Vendor 1
                        <span class="vendor-status active-status">●</span>
                    </div>
                    <div class="toggle-btn" onclick="setVendor(2, event)">
                        Vendor 2
                        <span class="vendor-status inactive-status">○</span>
                    </div>
                    <div class="toggle-btn" onclick="setVendor(3, event)">
                        Vendor 3
                        <span class="vendor-status inactive-status">○</span>
                    </div>
                </div>
                
                <div id="vendor1Details" class="vendor-details">

                    <div class="vendor-name-row">
                        <label for="vendor1Name">Vendor 1 Name:</label>
                        <input type="text" id="vendor1Name" placeholder="Enter vendor name" oninput="updateVendorPricing()" onchange="updateVendorPricing()">
                        <button onclick="showVendorHelp()" style="background: #3498db; color: white; border: none; padding: 4px 8px; border-radius: 50%; cursor: pointer; font-size: 12px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 10px;">?</button>
                        <div class="vendor-active-toggle active" onclick="toggleVendorActive(1)">
                            <span>ACTIVE</span>
                        </div>
                    </div>
                    
                    <h4 style="margin-top: 15px; color: #2c3e50;">Line Items</h4>
                    <div id="vendor1Items">
                        <div class="line-item">
                            <input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;">
                            <input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;">
                            <div style="position: relative; display: inline-block; width: 100px;">
                                <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                                <input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;">
                            </div>
                            <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                        </div>
                    </div>
                    <button onclick="addVendorItem(1)" class="add-item-btn">➕</button>
                </div>
                
                <div id="vendor2Details" class="vendor-details" style="display: none;">

                    <div class="vendor-name-row">
                        <label for="vendor2Name">Vendor 2 Name:</label>
                        <input type="text" id="vendor2Name" placeholder="Enter vendor name" oninput="updateVendorPricing()" onchange="updateVendorPricing()">
                        <button onclick="showVendorHelp()" style="background: #3498db; color: white; border: none; padding: 4px 8px; border-radius: 50%; cursor: pointer; font-size: 12px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 10px;">?</button>
                        <div class="vendor-active-toggle inactive" onclick="toggleVendorActive(2)">
                            <span>INACTIVE</span>
                        </div>
                    </div>
                    
                    <h4 style="margin-top: 15px; color: #2c3e50;">Line Items</h4>
                    <div id="vendor2Items">
                        <div class="line-item">
                            <input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;">
                            <input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;">
                            <div style="position: relative; display: inline-block; width: 100px;">
                                <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                                <input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;">
                            </div>
                            <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                        </div>
                    </div>
                    <button onclick="addVendorItem(2)" class="add-item-btn">➕</button>
                </div>
                
                <div id="vendor3Details" class="vendor-details" style="display: none;">

                    <div class="vendor-name-row">
                        <label for="vendor3Name">Vendor 3 Name:</label>
                        <input type="text" id="vendor3Name" placeholder="Enter vendor name" oninput="updateVendorPricing()" onchange="updateVendorPricing()">
                        <button onclick="showVendorHelp()" style="background: #3498db; color: white; border: none; padding: 4px 8px; border-radius: 50%; cursor: pointer; font-size: 12px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 10px;">?</button>
                        <div class="vendor-active-toggle inactive" onclick="toggleVendorActive(3)">
                            <span>INACTIVE</span>
                        </div>
                    </div>
                    
                    <h4 style="margin-top: 15px; color: #2c3e50;">Line Items</h4>
                    <div id="vendor3Items">
                        <div class="line-item">
                            <input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;">
                            <input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;">
                            <div style="position: relative; display: inline-block; width: 100px;">
                                <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                                <input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;">
                            </div>
                            <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                        </div>
                    </div>
                    <button onclick="addVendorItem(3)" class="add-item-btn">➕</button>
                </div>
                </div>
            </div>
            
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('cableSupplier')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 📋 Quotes
                </h3>
                <div id="cableSupplier" class="section-content">
                <div id="vendorQuotes">
                    <div class="line-item">
                        <input type="text" placeholder="Vendor Name" class="vendor-name" style="width: 120px;">
                        <input type="text" placeholder="Item Description/Part #" class="vendor-desc" style="flex: 2;">
                        <input type="text" placeholder="Quote #" class="vendor-quote" style="width: 100px;">
                        <div style="position: relative; display: inline-block; width: 100px;">
                            <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                            <input type="number" placeholder="Amount" class="vendor-amount" step="0.01" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;">
                        </div>
                        <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                    </div>
                </div>
                <button onclick="addVendorQuote()" class="add-item-btn">➕</button>
                </div>
            </div>
            

            
            <!-- Assigned to Staff Section -->
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('staffLineItems')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 👥 Assigned to Staff
                </h3>
                <div id="staffLineItems" class="section-content">
                <div id="staffLineItemsContainer">
                    <div class="line-item">
                        <input type="text" placeholder="Description" class="staff-desc" style="flex: 2;">
                        <input type="text" placeholder="Note" class="staff-note" style="flex: 3;">
                        <input type="number" placeholder="Hours" class="staff-hours" step="0.1" min="0" oninput="calculate()" onchange="calculate()" style="width: 60px;">
                        <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                    </div>
                </div>
                <button onclick="addStaffLineItem()" class="add-item-btn">➕</button>
                </div>
            </div>
            
            <!-- Project Section -->
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('projectConfig')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 📋 Project
                </h3>
                <div id="projectConfig" class="section-content">
                <!-- Project Management Controls -->
                <div style="margin-bottom: 20px; padding: 15px; background: #f0f8ff; border-radius: 8px; border: 1px solid #b3d9ff;">
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <button onclick="exportCSV()" style="background: #27ae60; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📄 Export CSV</button>
                        <button onclick="saveProject()" style="background: #3498db; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">💾 Save Project</button>
                        <button onclick="loadProject()" style="background: #f39c12; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📂 Load Project</button>
                        <button onclick="showProjectHistory()" style="background: #9b59b6; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📋 Project History</button>
                    </div>
                </div>
                
                <!-- Project Information -->
                <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">Project Information</h4>
                    <div class="setup-grid">
                        <div class="setup-item">
                            <label for="projectName">Project Name:</label>
                            <input type="text" id="projectName" placeholder="Enter project name" oninput="updateProjectHeader()">
                        </div>
                        <div class="setup-item">
                            <label for="projectDescription">Description:</label>
                            <input type="text" id="projectDescription" placeholder="Brief project description" oninput="updateProjectHeader()">
                        </div>
                        <div class="setup-item">
                            <label for="projectRevision">Revision:</label>
                            <input type="text" id="projectRevision" value="1.0" placeholder="1.0" oninput="updateProjectHeader()">
                        </div>
                        <div class="setup-item">
                            <label for="projectDate">Date:</label>
                            <input type="date" id="projectDate" value="" oninput="updateProjectHeader()">
                        </div>
                    </div>
                </div>
                
                <!-- Auto Save Project and Project Controls -->
                <div style="margin-bottom: 20px; padding: 15px; background: #e8f4fd; border-radius: 8px; border: 1px solid #b3d9ff;">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">Project Controls</h4>
                    
                    <!-- Auto Save Project -->
                    <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <input type="checkbox" id="autoSave" style="width: 20px; height: 20px; margin: 0;" onchange="updateProjectHeader()" checked>
                            <label for="autoSave" style="font-weight: 600; color: #2c3e50; margin: 0; font-size: 14px;">Auto Save Project</label>
                        </div>
                        <div style="font-size: 12px; color: #7f8c8d; margin-top: 5px;">
                            Automatically saves project to local storage every time you make changes
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <button onclick="saveDefaults()" style="background: #3498db; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">💾 Save Project Defaults</button>
                        <button onclick="resetToDefaults()" style="background: #95a5a6; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">🔄 Reset to Project Defaults</button>
                        <button onclick="resetToZero()" style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">🔄 Reset to Zero</button>
                    </div>

                </div>
                </div>
            </div>
            
            <!-- Install Section -->
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('installationTasks')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> ⚡ Install
                </h3>
                <div id="installationTasks" class="section-content">
                
                <!-- Installation Tasks -->
                <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">Installation Tasks</h4>
                    <div class="setup-grid">
                        <div class="setup-item">
                            <label for="cableRunTime">Cable Running Time (min/cable):</label>
                            <input type="number" id="cableRunTime" value="0" min="0" step="0.5">
                        </div>
                        
                        <div class="setup-item">
                            <label for="testingTime">Testing Time (min/cable):</label>
                            <input type="number" id="testingTime" value="0" min="0" step="0.5">
                        </div>
                        
                        <div class="setup-item">
                            <label for="rackSetupTime">Rack Setup Time (hours):</label>
                            <input type="number" id="rackSetupTime" value="0" min="0" step="0.5">
                        </div>
                        
                        <div class="setup-item">
                            <label for="labelingTime">Labeling Time (min/cable):</label>
                            <input type="number" id="labelingTime" value="0" min="0" step="0.1">
                        </div>
                        
                        <div class="setup-item">
                            <label for="cleanupTime">Cleanup Time (hours):</label>
                            <input type="number" id="cleanupTime" value="0" min="0" step="0.1">
                        </div>
                        
                        <div class="setup-item">
                            <label for="cutoverTime">Cutover Time (hours):</label>
                            <input type="number" id="cutoverTime" value="0" min="0" step="0.5">
                        </div>
                        
                        <div class="setup-item">
                            <label for="decommissioningTime">Decommissioning Time (hours):</label>
                            <input type="number" id="decommissioningTime" value="0" min="0" step="0.5">
                        </div>
                    </div>
                </div>
                </div>
            </div>
            
            <!-- Labor Section -->
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('laborConfig')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> 👷 Labor
                </h3>
                <div id="laborConfig" class="section-content">
                
                <!-- Labor Configuration -->
                <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">Labor Configuration</h4>
                    <div class="preset-selector">
                        <label for="laborPreset">Labor Preset:</label>
                        <select id="laborPreset" onchange="applyLaborPreset()">
                            <option value="custom">Custom Configuration</option>
                            <option value="zeroed">Zeroed Labor (Equipment Only)</option>
                            <option value="rateA">Rate A ($25/hr)</option>
                            <option value="rateB">Rate B ($55/hr)</option>
                            <option value="rateC">Rate C ($75/hr)</option>
                            <option value="rateD">Rate D ($125/hr)</option>
                        </select>
                    </div>
                    
                    <div class="toggle-group">
                        <div class="toggle-btn active" onclick="setLaborMode('single')">Single Rate</div>
                        <div class="toggle-btn" onclick="setLaborMode('split')">Project Lead + Tech</div>
                    </div>
                    
                    <div id="singleLabor">
                        <div class="cable-header-row" style="display: flex; gap: 10px; margin-bottom: 10px; font-weight: 500; font-size: 14px; color: #2c3e50;">
                            <div style="width: 120px; text-align: center;"># of Techs</div>
                            <div style="width: 100px; text-align: center;">Hourly Rate</div>
                            <div style="width: 120px; text-align: center;">Hours per Day</div>
                        </div>
                        <div class="line-item">
                            <input type="number" id="numTechnicians" value="1" min="1" style="width: 120px; text-align: center;">
                            <input type="number" id="hourlyRate" value="60" min="1" style="width: 100px; text-align: center;">
                            <input type="number" id="workHoursPerDay" value="8" min="1" max="12" style="width: 120px; text-align: center;">
                        </div>
                    </div>
                    
                    <div id="splitLabor" style="display: none;">
                        <div class="labor-split">
                            <div class="labor-section">
                                <h5 style="margin-bottom: 10px; color: #2c3e50;">Project Lead + Tech</h5>
                                <div class="cable-header-row" style="display: flex; gap: 10px; margin-bottom: 10px; font-weight: 500; font-size: 14px; color: #2c3e50;">
                                    <div style="width: 120px; text-align: center;"># of Techs</div>
                                    <div style="width: 100px; text-align: center;">Hourly Rate</div>
                                    <div style="width: 120px; text-align: center;">Hours per Day</div>
                                </div>
                                <div class="line-item">
                                    <input type="number" id="projectLeadCount" value="1" min="1" style="width: 120px; text-align: center;">
                                    <input type="number" id="projectLeadRate" value="75" min="1" style="width: 100px; text-align: center;">
                                    <input type="number" id="projectLeadHours" value="8" min="1" max="12" style="width: 120px; text-align: center;">
                                </div>
                            </div>
                        </div>
                        <div style="margin-top: 10px; display: flex; align-items: center; gap: 10px;">
                            <span style="font-size: 14px; font-weight: 600; color: #2c3e50;">Labor Rate Information</span>
                            <button onclick="showHelp('installation')" style="background: #3498db; color: white; border: none; padding: 4px 8px; border-radius: 50%; cursor: pointer; font-size: 12px; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">?</button>
                        </div>
                    </div>
                    
                    <label for="overtimeToggle">
                        <input type="checkbox" id="overtimeToggle" style="width: auto; margin-right: 8px;">
                        Apply Overtime Rules (1.5x after 8hrs, 2x after 12hrs)
                    </label>
                </div>
                </div>
            </div>
            
            <!-- Setup Section -->
            <div class="input-group">
                <h3 class="section-header" onclick="toggleSection('configSettings')" style="cursor: pointer; user-select: none;">
                    <span class="toggle-icon">▶</span> ⚙️ Setup
                </h3>
                <div id="configSettings" class="section-content">
                
                <!-- Default Settings -->
                <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">Default Settings</h4>
                    <div class="setup-grid">
                        <div class="setup-item">
                            <label for="terminationsPerCable">Terminations per Cable:</label>
                            <input type="number" id="terminationsPerCable" value="2" min="1">
                        </div>
                    
                    <div class="setup-item">
                        <label for="timePerTermination">Time per Termination (minutes):</label>
                        <input type="number" id="timePerTermination" value="1.5" min="0.1" step="0.1">
                    </div>
                    
                    <div class="setup-item">
                        <label for="wasteFactor">Cable Waste Factor (%):</label>
                        <input type="number" id="wasteFactor" value="7.5" min="0" max="20" step="0.1">
                    </div>
                    
                    <div class="setup-item">
                        <label for="connectorWasteFactor">Connector Waste Factor (%):</label>
                        <input type="number" id="connectorWasteFactor" value="3.0" min="0" max="20" step="0.1">
                    </div>
                    
                    <div class="setup-item">
                        <label for="spoolLength">Cable Spool Length (feet):</label>
                        <input type="number" id="spoolLength" value="1000" min="1">
                    </div>
                    
                    <div class="setup-item">
                        <label for="cableCostPerFoot">Cable Cost per Foot ($):</label>
                        <input type="number" id="cableCostPerFoot" value="0" min="0" step="0.01">
                    </div>
                    
                    <div class="setup-item">
                        <label for="terminationCost">Termination Cost per Connector ($):</label>
                        <input type="number" id="terminationCost" value="0" min="0" step="0.01">
                    </div>
                    

                </div>
                
                <!-- Default Settings Controls -->
                <div style="margin-top: 15px; text-align: center; display: flex; gap: 10px; justify-content: center;">
                                    <button onclick="saveDefaultSettings()" style="background: #3498db; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">💾 Save Default Settings</button>
                <button onclick="loadDefaultSettings()" style="background: #95a5a6; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 13px;">📂 Load Default Settings</button>
                </div>
            </div>
        </div>
        
        
        </div>
    </div>
    
    <!-- Help Modal -->
    <div id="helpModal" class="help-modal" style="display: none;">
        <div class="help-modal-content">
            <div class="help-modal-header">
                <h3 id="helpModalTitle">Help Guide</h3>
                <button onclick="closeHelpModal()" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">✕</button>
            </div>
            <div class="help-modal-body" id="helpModalBody">
                <!-- Content will be dynamically loaded -->
            </div>
        </div>
    </div>

    <script>
        // Vendor pricing data
        const vendorPricing = {
            1: { 
                name: '', 
                items: [],
                active: true 
            },
            2: { 
                name: '', 
                items: [],
                active: false 
            },
            3: { 
                name: '', 
                items: [],
                active: false 
            }
        };
        
        let currentVendor = 1;
        let currentLaborMode = 'single';
        let cableLengthMode = 'average';
        
        function toggleVendorActive(vendorNum) {
            const toggleDiv = document.querySelector('#vendor' + vendorNum + 'Details .vendor-active-toggle');
            const span = toggleDiv.querySelector('span');
            
            // Toggle the active state
            const isCurrentlyActive = toggleDiv.classList.contains('active');
            
            // Update the visual appearance
            if (isCurrentlyActive) {
                toggleDiv.className = 'vendor-active-toggle inactive';
                span.textContent = 'INACTIVE';
            } else {
                toggleDiv.className = 'vendor-active-toggle active';
                span.textContent = 'ACTIVE';
            }
            
            // Update the status indicator in the vendor button
            const vendorButton = document.querySelector('.toggle-group .toggle-btn:nth-child(' + vendorNum + ') .vendor-status');
            if (vendorButton) {
                if (isCurrentlyActive) {
                    vendorButton.className = 'vendor-status inactive-status';
                    vendorButton.textContent = '○';
                } else {
                    vendorButton.className = 'vendor-status active-status';
                    vendorButton.textContent = '●';
                }
            }
            
            // Update vendor pricing and recalculate
            updateVendorPricing();
        }
        
        // Update vendor pricing when user manually changes values
        function updateVendorPricing() {
            const name = document.getElementById('vendor' + currentVendor + 'Name').value;
            const toggleDiv = document.querySelector('#vendor' + currentVendor + 'Details .vendor-active-toggle');
            const active = toggleDiv.classList.contains('active');
            
            // Get all vendor items
            const items = [];
            document.querySelectorAll('#vendor' + currentVendor + 'Items .line-item').forEach(item => {
                const desc = item.querySelector('.vendor-item-desc').value;
                const qty = parseFloat(item.querySelector('.vendor-item-qty').value) || 1;
                const cost = parseFloat(item.querySelector('.vendor-item-cost').value) || 0;
                if (desc && desc.trim() !== '' && cost > 0) {
                    items.push({ desc, qty, cost });
                }
            });
            
            vendorPricing[currentVendor] = {
                name: name,
                items: items,
                active: active
            };
            
            calculate();
        }
        
        function setVendor(vendor, event) {
            currentVendor = vendor;
            document.querySelectorAll('.toggle-group .toggle-btn').forEach(btn => {
                if (btn && btn.classList) {
                    btn.classList.remove('active');
                }
            });
            if (event && event.target && event.target.classList) {
                event.target.classList.add('active');
            }
            
            // Update status indicators for all vendor buttons
            for (let i = 1; i <= 3; i++) {
                const vendorButton = document.querySelector('.toggle-group .toggle-btn:nth-child(' + i + ') .vendor-status');
                if (vendorButton) {
                    if (vendorPricing[i] && vendorPricing[i].active) {
                        vendorButton.className = 'vendor-status active-status';
                        vendorButton.textContent = '●';
                    } else {
                        vendorButton.className = 'vendor-status inactive-status';
                        vendorButton.textContent = '○';
                    }
                }
            }
            
            // Hide all vendor details
            document.querySelectorAll('.vendor-details').forEach(detail => detail.style.display = 'none');
            
            // Show selected vendor details
            const vendorDetails = document.getElementById('vendor' + vendor + 'Details');
            if (vendorDetails) {
                vendorDetails.style.display = 'block';
            }
            
            // Ensure vendor exists in vendorPricing
            if (!vendorPricing[vendor]) {
                vendorPricing[vendor] = { name: '', items: [], active: vendor === 1 };
            }
            
            // Update the displayed values
            const vendorNameInput = document.getElementById('vendor' + vendor + 'Name');
            if (vendorNameInput) {
                vendorNameInput.value = vendorPricing[vendor].name || '';
            }
            
            // Update the visual state of the active toggle
            const toggleDiv = document.querySelector('#vendor' + vendor + 'Details .vendor-active-toggle');
            if (toggleDiv) {
                const span = toggleDiv.querySelector('span');
                if (vendorPricing[vendor].active) {
                    toggleDiv.className = 'vendor-active-toggle active';
                    if (span) span.textContent = 'ACTIVE';
                } else {
                    toggleDiv.className = 'vendor-active-toggle inactive';
                    if (span) span.textContent = 'INACTIVE';
                }
            }
            
            // Load vendor items
            loadVendorItems(vendor);
            
            calculate();
        }
        
        function setLaborMode(mode) {
            currentLaborMode = mode;
            document.querySelectorAll('.toggle-group .toggle-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            if (mode === 'single') {
                document.getElementById('singleLabor').style.display = 'block';
                document.getElementById('splitLabor').style.display = 'none';
            } else {
                document.getElementById('singleLabor').style.display = 'none';
                document.getElementById('splitLabor').style.display = 'block';
            }
            calculate();
        }
        
        function applyLaborPreset() {
            const preset = document.getElementById('laborPreset').value;
            
            switch(preset) {
                case 'zeroed':
                    document.getElementById('hourlyRate').value = 0;
                    document.getElementById('leadRate').value = 0;
                    document.getElementById('techRate').value = 0;
                    break;
                case 'rateA':
                    document.getElementById('hourlyRate').value = 25;
                    document.getElementById('leadRate').value = 45;
                    document.getElementById('techRate').value = 15;
                    break;
                case 'rateB':
                    document.getElementById('hourlyRate').value = 55;
                    document.getElementById('leadRate').value = 75;
                    document.getElementById('techRate').value = 45;
                    break;
                case 'rateC':
                    document.getElementById('hourlyRate').value = 75;
                    document.getElementById('leadRate').value = 95;
                    document.getElementById('techRate').value = 65;
                    break;
                case 'rateD':
                    document.getElementById('hourlyRate').value = 125;
                    document.getElementById('leadRate').value = 155;
                    document.getElementById('techRate').value = 105;
                    break;
            }
            calculate();
        }
        
        // Project save/load functions
        function saveProject() {
            const projectName = document.getElementById('projectName').value || 'Unnamed Project';
            const fileName = prompt('Enter file name for project:', projectName + '.json');
            
            if (fileName) {
                const projectData = {
                    header: {
                        name: document.getElementById('projectName').value,
                        description: document.getElementById('projectDescription').value,
                        revision: document.getElementById('projectRevision').value,
                        date: document.getElementById('projectDate').value
                    },
                    inputs: getAllInputValues(),
                    vendorQuotes: getVendorQuotes(),
                    otherMaterials: getOtherMaterials(),
                    staffLineItems: getStaffLineItems(),
                    cableLengths: getCableLengths(),
                    cableLengthMode: cableLengthMode,
                    vendorPricing: vendorPricing,
                    currentVendor: currentVendor,
                    currentLaborMode: currentLaborMode,
                    autoSaveEnabled: document.getElementById('autoSave') ? document.getElementById('autoSave').checked : false
                };
                
                const dataStr = JSON.stringify(projectData, null, 2);
                const dataBlob = new Blob([dataStr], {type: 'application/json'});
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = fileName.endsWith('.json') ? fileName : fileName + '.json';
                link.click();
                
                URL.revokeObjectURL(url);
                
                // Log project save action
                logProjectChange('Project Saved', `Project saved as ${link.download}`);
            }
        }
        
        function loadProject() {
            document.getElementById('projectFile').click();
        }
        
        function resetToDefaults() {
            // Load saved defaults from localStorage
            const savedDefaults = localStorage.getItem('projectDefaults');
            if (savedDefaults) {
                try {
                    const defaults = JSON.parse(savedDefaults);
                    loadProjectData(defaults);
                    alert('Project has been reset to saved defaults!');
                } catch (error) {
                    console.error('Error loading defaults:', error);
                    alert('Error loading saved defaults. Using factory defaults instead.');
                    resetToZero();
                }
            } else {
                alert('No saved defaults found. Use "Save Defaults" to save current settings as defaults.');
                resetToZero();
            }
        }
        
        function resetToZero() {
            if (confirm('Are you sure you want to reset all values to zero? This will clear all current data.')) {
                try {
                    // Clear localStorage first to prevent reloading old data

                    // Clear vendor pricing data (can't reassign const, so clear properties)
                    vendorPricing[1] = { name: '', items: [], active: true };
                    vendorPricing[2] = { name: '', items: [], active: false };
                    vendorPricing[3] = { name: '', items: [], active: false };
                    
                    // Force clear any existing vendor items
                    for (let i = 1; i <= 3; i++) {
                        if (vendorPricing[i] && vendorPricing[i].items) {
                            vendorPricing[i].items.length = 0; // Clear array
                        }
                    }
                    currentVendor = 1;
                    
                    // Reset header
                    document.getElementById('projectName').value = '';
                    document.getElementById('projectDescription').value = '';
                    document.getElementById('projectRevision').value = '1.0';
                    document.getElementById('projectDate').value = new Date().toISOString().split('T')[0];
                    updateProjectHeader(); // Update the display header
                    
                    // Reset cable configuration to zero
                    const avgCableType = document.querySelector('#averageLengthMode .cable-type');
                    if (avgCableType) {
                        avgCableType.value = '1855';
                    }
                    document.getElementById('numCables').value = '0';
                    document.getElementById('avgCableLength').value = '0';
                    cableLengthMode = 'average';
                    
                    // Clear all line items with zero values
                    document.getElementById('otherMaterials').innerHTML = '<div class="line-item"><input type="text" placeholder="Description" class="other-material-desc" style="flex: 3;"><input type="number" placeholder="Qty" class="other-material-qty" min="1" value="0" oninput="calculate()" onchange="calculate()" style="width: 60px;"><div style="position: relative; display: inline-block; width: 100px;"><span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span><input type="number" placeholder="Amount" class="other-material-amount" step="0.01" value="0" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;"></div><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    
                    document.getElementById('vendorQuotes').innerHTML = '<div class="line-item"><input type="text" placeholder="Vendor Name" class="vendor-name" style="width: 120px;"><input type="text" placeholder="Item Description/Part #" class="vendor-desc" style="flex: 2;"><input type="text" placeholder="Quote #" class="vendor-quote" style="width: 100px;"><div style="position: relative; display: inline-block; width: 100px;"><span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span><input type="number" placeholder="Amount" class="vendor-amount" step="0.01" value="0" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;"></div><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    
                    document.getElementById('staffLineItemsContainer').innerHTML = '<div class="line-item"><input type="text" placeholder="Description" class="staff-desc" style="flex: 2;"><input type="text" placeholder="Note" class="staff-note" style="flex: 3;"><input type="number" placeholder="Hours" class="staff-hours" step="0.1" min="0" value="0" style="width: 60px;"><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    
                    document.getElementById('cableLengths').innerHTML = '<div class="line-item cable-line-item"><select class="cable-type" data-value="1855" onchange="calculate(); updateCableTypeColor(this)"><option value="1855">1855</option><option value="1505">1505</option><option value="1694">1694</option><option value="cat6">Cat6</option><option value="other">Other</option></select><input type="number" placeholder="Qty" class="cable-qty" min="1" value="0" style="width: 60px;" oninput="calculate()" onchange="calculate()"><input type="number" placeholder="Length" class="cable-length" min="1" value="0" style="width: 80px;" oninput="calculate()" onchange="calculate()"><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    
                    // Clear vendor item containers
                    document.getElementById('vendor1Items').innerHTML = '<div class="line-item"><input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;"><input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;"><div style="position: relative; display: inline-block; width: 100px;"><span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span><input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;"></div><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    document.getElementById('vendor2Items').innerHTML = '<div class="line-item"><input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;"><input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;"><div style="position: relative; display: inline-block; width: 100px;"><span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span><input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;"></div><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    document.getElementById('vendor3Items').innerHTML = '<div class="line-item"><input type="text" placeholder="Description/Part #" class="vendor-item-desc" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;"><input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;"><div style="position: relative; display: inline-block; width: 100px;"><span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span><input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="0" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;"></div><button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button></div>';
                    
                    // Clear vendor names
                    document.getElementById('vendor1Name').value = '';
                    document.getElementById('vendor2Name').value = '';
                    document.getElementById('vendor3Name').value = '';
                    
                    // Manually update vendor UI without calling setVendor
                    document.querySelectorAll('.toggle-group .toggle-btn').forEach(btn => btn.classList.remove('active'));
                    const vendor1Btn = document.querySelector('.toggle-group .toggle-btn:nth-child(1)');
                    if (vendor1Btn) vendor1Btn.classList.add('active');
                    
                    // Update status indicators for all vendor buttons
                    for (let i = 1; i <= 3; i++) {
                        const vendorButton = document.querySelector('.toggle-group .toggle-btn:nth-child(' + i + ') .vendor-status');
                        if (vendorButton) {
                            if (i === 1) {
                                vendorButton.className = 'vendor-status active-status';
                                vendorButton.textContent = '●';
                            } else {
                                vendorButton.className = 'vendor-status inactive-status';
                                vendorButton.textContent = '○';
                            }
                        }
                    }
                    
                    // Hide all vendor details
                    document.querySelectorAll('.vendor-details').forEach(detail => detail.style.display = 'none');
                    
                    // Show vendor 1 details
                    const vendor1Details = document.getElementById('vendor1Details');
                    if (vendor1Details) {
                        vendor1Details.style.display = 'block';
                    }
                    
                    // Update the visual state of the active toggle
                    const toggleDiv = document.querySelector('#vendor1Details .vendor-active-toggle');
                    if (toggleDiv) {
                        toggleDiv.className = 'vendor-active-toggle active';
                        const span = toggleDiv.querySelector('span');
                        if (span) span.textContent = 'ACTIVE';
                    }
                    
                    // Save to localStorage
                    calculate();
                    
                    // Force update vendor pricing to ensure it's cleared
                    updateVendorPricing();
                    
                    // Reset labor configuration to defaults
                    currentLaborMode = 'single';
                    document.getElementById('laborPreset').value = 'custom';
                    document.getElementById('numTechnicians').value = '0';
                    document.getElementById('hourlyRate').value = '0';
                    document.getElementById('workHoursPerDay').value = '8';
                    document.getElementById('overtimeToggle').checked = false;
                    
                    // Reset installation tasks to zero
                    document.getElementById('cableRunTime').value = '0';
                    document.getElementById('testingTime').value = '0';
                    document.getElementById('rackSetupTime').value = '0';
                    document.getElementById('labelingTime').value = '0';
                    document.getElementById('cleanupTime').value = '0';
                    document.getElementById('cutoverTime').value = '0';
                    document.getElementById('decommissioningTime').value = '0';
                    
                    // Reset setup configuration to defaults
                    document.getElementById('terminationsPerCable').value = '0';
                    document.getElementById('timePerTermination').value = '0';
                    document.getElementById('wasteFactor').value = '0';
                    document.getElementById('connectorWasteFactor').value = '0';
                    document.getElementById('spoolLength').value = '0';
                    document.getElementById('cableCostPerFoot').value = '0';
                    document.getElementById('terminationCost').value = '0';
                    document.getElementById('autoSave').checked = false;
                    
                    // Hide spool mismatch notification
                    const notification = document.getElementById('spoolMismatchNotification');
                    if (notification) notification.style.display = 'none';
                    
                    // Set cable length mode after all other resets
                    setCableLengthMode('average');
                    
                    // Debug: Check vendor data after reset
                    console.log('Vendor data after reset:', vendorPricing);
                    
                    // Final calculation
                    calculate();
                    
                    alert('Project has been reset to zero!');
                } catch (error) {
                    console.error('Error during reset:', error);
                    alert('Error during reset: ' + error.message);
                }
            }
        }
        
        function saveDefaults() {
            try {
                const projectData = {
                    header: {
                        name: document.getElementById('projectName').value,
                        description: document.getElementById('projectDescription').value,
                        revision: document.getElementById('projectRevision').value,
                        date: document.getElementById('projectDate').value
                    },
                    inputs: getAllInputValues(),
                    vendorQuotes: getVendorQuotes(),
                    otherMaterials: getOtherMaterials(),
                    staffLineItems: getStaffLineItems(),
                    cableLengths: getCableLengths(),
                    cableLengthMode: cableLengthMode,
                    vendorPricing: vendorPricing,
                    currentVendor: currentVendor,
                    autoSaveEnabled: document.getElementById('autoSave') ? document.getElementById('autoSave').checked : false
                };
                
                localStorage.setItem('projectDefaults', JSON.stringify(projectData));
                alert('Current settings have been saved as defaults!');
                
                // Log project defaults save action
                logProjectChange('Project Defaults Saved', 'Global project defaults updated');
            } catch (error) {
                console.error('Error saving defaults:', error);
                alert('Error saving defaults: ' + error.message);
            }
        }
        
        function saveDefaultSettings() {
            try {
                const defaultSettings = {
                    terminationsPerCable: document.getElementById('terminationsPerCable').value,
                    timePerTermination: document.getElementById('timePerTermination').value,
                    wasteFactor: document.getElementById('wasteFactor').value,
                    connectorWasteFactor: document.getElementById('connectorWasteFactor').value,
                    spoolLength: document.getElementById('spoolLength').value,
                    cableCostPerFoot: document.getElementById('cableCostPerFoot').value,
                    terminationCost: document.getElementById('terminationCost').value
                };
                
                localStorage.setItem('defaultSettings', JSON.stringify(defaultSettings));
                alert('Default settings have been saved!');
                
                // Log default settings save action
                logProjectChange('Default Settings Saved', 'Configuration defaults updated');
            } catch (error) {
                console.error('Error saving default settings:', error);
                alert('Error saving default settings: ' + error.message);
            }
        }
        
        function loadDefaultSettings() {
            try {
                const savedDefaults = localStorage.getItem('defaultSettings');
                if (savedDefaults) {
                    const defaultSettings = JSON.parse(savedDefaults);
                    
                    // Load each default setting if it exists
                    if (defaultSettings.terminationsPerCable !== undefined) {
                        document.getElementById('terminationsPerCable').value = defaultSettings.terminationsPerCable;
                    }
                    if (defaultSettings.timePerTermination !== undefined) {
                        document.getElementById('timePerTermination').value = defaultSettings.timePerTermination;
                    }
                    if (defaultSettings.wasteFactor !== undefined) {
                        document.getElementById('wasteFactor').value = defaultSettings.wasteFactor;
                    }
                    if (defaultSettings.connectorWasteFactor !== undefined) {
                        document.getElementById('connectorWasteFactor').value = defaultSettings.connectorWasteFactor;
                    }
                    if (defaultSettings.spoolLength !== undefined) {
                        document.getElementById('spoolLength').value = defaultSettings.spoolLength;
                    }
                    if (defaultSettings.cableCostPerFoot !== undefined) {
                        document.getElementById('cableCostPerFoot').value = defaultSettings.cableCostPerFoot;
                    }
                    if (defaultSettings.terminationCost !== undefined) {
                        document.getElementById('terminationCost').value = defaultSettings.terminationCost;
                    }
                    
                    calculate(); // Recalculate with new values
                    alert('Default settings have been loaded!');
                    
                    // Log default settings load action
                    logProjectChange('Default Settings Loaded', 'Configuration defaults restored');
                } else {
                    alert('No saved default settings found.');
                }
            } catch (error) {
                console.error('Error loading default settings:', error);
                alert('Error loading default settings: ' + error.message);
            }
        }
        
        function logProjectChange(action, details) {
            try {
                const timestamp = new Date().toISOString();
                const changeEntry = {
                    timestamp: timestamp,
                    action: action,
                    details: details,
                    projectName: document.getElementById('projectName').value || 'Untitled Project'
                };
                
                // Get existing changelog or create new array
                const existingLog = localStorage.getItem('projectChangelog');
                let changelog = existingLog ? JSON.parse(existingLog) : [];
                
                // Add new entry to beginning of array (most recent first)
                changelog.unshift(changeEntry);
                
                // Keep only last 50 entries to prevent storage bloat
                if (changelog.length > 50) {
                    changelog = changelog.slice(0, 50);
                }
                
                // Save updated changelog
                localStorage.setItem('projectChangelog', JSON.stringify(changelog));
            } catch (error) {
                console.error('Error logging project change:', error);
            }
        }
        
        function showProjectHistory() {
            try {
                const changelog = localStorage.getItem('projectChangelog');
                if (changelog) {
                    const history = JSON.parse(changelog);
                    
                    let historyHTML = '<h3>Project History</h3>';
                    historyHTML += '<div style="max-height: 400px; overflow-y: auto; font-family: monospace; font-size: 12px;">';
                    
                    if (history.length === 0) {
                        historyHTML += '<p>No project history found.</p>';
                    } else {
                        history.forEach((entry, index) => {
                            const date = new Date(entry.timestamp).toLocaleString();
                            historyHTML += `<div style="margin-bottom: 10px; padding: 8px; background: ${index % 2 === 0 ? '#f8f9fa' : '#ffffff'}; border-radius: 4px;">`;
                            historyHTML += `<strong>${date}</strong><br/>`;
                            historyHTML += `<span style="color: #2c3e50;">${entry.projectName}</span> - `;
                            historyHTML += `<span style="color: #27ae60;">${entry.action}</span><br/>`;
                            if (entry.details) {
                                historyHTML += `<small style="color: #7f8c8d;">${entry.details}</small>`;
                            }
                            historyHTML += '</div>';
                        });
                    }
                    
                    historyHTML += '</div>';
                    historyHTML += '<div style="margin-top: 15px; text-align: center;">';
                    historyHTML += '<button onclick="clearProjectHistory()" style="background: #e74c3c; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Clear History</button>';
                    historyHTML += '<button onclick="closeHelpModal()" style="background: #95a5a6; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">Close</button>';
                    historyHTML += '</div>';
                    
                    // Use the existing help modal to display history
                    document.getElementById('helpModalTitle').textContent = 'Project History';
                    document.getElementById('helpModalBody').innerHTML = historyHTML;
                    document.getElementById('helpModal').style.display = 'flex';
                } else {
                    alert('No project history found.');
                }
            } catch (error) {
                console.error('Error showing project history:', error);
                alert('Error loading project history: ' + error.message);
            }
        }
        
        function clearProjectHistory() {
            if (confirm('Are you sure you want to clear all project history? This action cannot be undone.')) {
                localStorage.removeItem('projectChangelog');
                logProjectChange('History Cleared', 'All project history has been cleared');
                alert('Project history has been cleared.');
                closeHelpModal();
            }
        }
        
        function importProject(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const projectData = JSON.parse(e.target.result);
                        loadProjectData(projectData);
                    } catch (error) {
                        alert('Error loading project file: ' + error.message);
                    }
                };
                reader.readAsText(file);
            }
        }
        
        function loadProjectData(data) {
            try {
                console.log('Starting loadProjectData with data:', data);
                // Load header
                if (data.header) {
                    document.getElementById('projectName').value = data.header.name || '';
                    document.getElementById('projectDescription').value = data.header.description || '';
                    document.getElementById('projectRevision').value = data.header.revision || '1.0';
                    document.getElementById('projectDate').value = data.header.date || '';
                    updateProjectHeader(); // Update the display header
                }
                
                // Load inputs (will be re-applied after cable configuration is loaded)
                if (data.inputs) {
                    updateProjectHeader(); // Update header after loading all inputs
                }
                
                // Load vendor quotes
                if (data.vendorQuotes) {
                    loadVendorQuotes(data.vendorQuotes);
                }
                
                // Load other materials
                if (data.otherMaterials) {
                    loadOtherMaterials(data.otherMaterials);
                }
                
                // Load staff line items
                if (data.staffLineItems) {
                    loadStaffLineItems(data.staffLineItems);
                }
                
                // Load cable configuration - handle both modes
                console.log('Loading cable configuration...');
                if (data.cableLengthMode) {
                    console.log('Setting cable length mode to:', data.cableLengthMode);
                    cableLengthMode = data.cableLengthMode;
                    setCableLengthMode(cableLengthMode);
                    console.log('Cable length mode set successfully');
                }
                
                if (data.cableLengths) {
                    loadCableLengths(data.cableLengths);
                }
                
                // Re-apply inputs after cable mode is set to ensure values persist
                if (data.inputs) {
                    console.log('Loading saved input values:', data.inputs);
                    setAllInputValues(data.inputs);
                    console.log('After setAllInputValues - numCables:', document.getElementById('numCables')?.value, 'avgCableLength:', document.getElementById('avgCableLength')?.value);
                }
                
                // Load vendor pricing with error handling
                if (data.vendorPricing) {
                    // Ensure vendorPricing has the correct structure
                    for (let i = 1; i <= 3; i++) {
                        if (!data.vendorPricing[i]) {
                            data.vendorPricing[i] = { name: '', items: [], active: i === 1 };
                        }
                        if (!data.vendorPricing[i].items) {
                            data.vendorPricing[i].items = [];
                        }
                    }
                    Object.assign(vendorPricing, data.vendorPricing);
                }
                
                if (data.currentVendor) {
                    console.log('Setting current vendor to:', data.currentVendor);
                    currentVendor = data.currentVendor;
                    setVendor(currentVendor);
                    console.log('Current vendor set successfully');
                }
                
                if (data.currentLaborMode) {
                    console.log('Setting current labor mode to:', data.currentLaborMode);
                    currentLaborMode = data.currentLaborMode;
                    setLaborMode(currentLaborMode);
                    console.log('Current labor mode set successfully');
                }
                
                // Load auto-save state
                if (document.getElementById('autoSave')) {
                    document.getElementById('autoSave').checked = (data.autoSaveEnabled !== undefined) ? data.autoSaveEnabled : true;
                }
                
                calculate();
                
                // Log project load action
                const projectName = data.header?.name || 'Unnamed Project';
                logProjectChange('Project Loaded', `Project "${projectName}" loaded successfully`);
            } catch (error) {
                console.error('Error in loadProjectData:', error);
                alert('Error loading project data: ' + error.message);
            }
        }
        
        function getAllInputValues() {
            const inputs = {};
            const inputElements = document.querySelectorAll('input[type="number"], input[type="text"], input[type="date"], select');
            inputElements.forEach(input => {
                if (input.id) {
                    inputs[input.id] = input.value;
                }
            });
            return inputs;
        }
        
        function setAllInputValues(values) {
            Object.keys(values).forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.value = values[id];
                }
            });
        }
        
        function getVendorQuotes() {
            const quotes = [];
            document.querySelectorAll('#vendorQuotes .line-item').forEach(item => {
                const name = item.querySelector('.vendor-name').value;
                const desc = item.querySelector('.vendor-desc').value;
                const quote = item.querySelector('.vendor-quote').value;
                const amount = item.querySelector('.vendor-amount').value;
                if (name || desc || quote || amount) {
                    quotes.push({ name, desc, quote, amount });
                }
            });
            return quotes;
        }
        
        function loadVendorQuotes(quotes) {
            const container = document.getElementById('vendorQuotes');
            if (container) {
                container.innerHTML = '';
                quotes.forEach(quote => {
                    addVendorQuote(quote.name, quote.desc, quote.quote, quote.amount);
                });
                addEventListenersToLineItems();
            }
        }
        
        function getOtherMaterials() {
            const materials = [];
            document.querySelectorAll('#otherMaterials .line-item').forEach(item => {
                const desc = item.querySelector('.other-material-desc').value;
                const qty = parseFloat(item.querySelector('.other-material-qty').value) || 1;
                const amount = parseFloat(item.querySelector('.other-material-amount').value) || 0;
                if (desc || amount > 0) {
                    materials.push({ desc, qty, amount });
                }
            });
            return materials;
        }
        
        function loadOtherMaterials(materials) {
            const container = document.getElementById('otherMaterials');
            if (container) {
                container.innerHTML = '';
                materials.forEach(material => {
                    addOtherMaterial(material.desc, material.qty, material.amount);
                });
                addEventListenersToLineItems();
            }
        }
        
        function getStaffLineItems() {
            const items = [];
            document.querySelectorAll('#staffLineItems .line-item').forEach(item => {
                const desc = item.querySelector('.staff-desc').value;
                const note = item.querySelector('.staff-note').value;
                const hours = parseFloat(item.querySelector('.staff-hours').value) || 0;
                if (desc || note || hours > 0) {
                    items.push({ desc, note, hours });
                }
            });
            return items;
        }
        
        function getCableLengths() {
            const lengths = [];
            document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                const length = parseFloat(item.querySelector('.cable-length').value) || 0;
                const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                const cableType = item.querySelector('.cable-type').value || '1855';
                lengths.push({ length, qty, cableType });
            });
            return lengths;
        }
        
        function loadStaffLineItems(items) {
            const container = document.getElementById('staffLineItemsContainer');
            if (container) {
                container.innerHTML = '';
                items.forEach(item => {
                    addStaffLineItem(item.desc, item.note, item.hours);
                });
                addEventListenersToLineItems();
            }
        }
        
        function loadCableLengths(lengths) {
            const container = document.getElementById('cableLengths');
            if (container) {
                // Clear existing line items but keep the header
                const header = container.querySelector('.cable-header-row');
                container.innerHTML = '';
                if (header) {
                    container.appendChild(header);
                }
                
                if (!lengths || lengths.length === 0) {
                    // Add a default row if no saved cables
                    addCableLength();
                } else {
                    lengths.forEach(item => {
                        addCableLength(item.qty || 1, item.length, item.cableType || '1855');
                    });
                }
                addEventListenersToLineItems();
            }
        }
        
        function loadVendorItems(vendorNum) {
            const container = document.getElementById('vendor' + vendorNum + 'Items');
            if (container && vendorPricing[vendorNum] && vendorPricing[vendorNum].items) {
                container.innerHTML = '';
                vendorPricing[vendorNum].items.forEach(item => {
                    addVendorItem(vendorNum, item.desc, item.qty || 1, item.cost);
                });
            }
        }
        
        // Line item management functions
        function addVendorQuote(name = '', desc = '', quote = '', amount = '') {
            const container = document.getElementById('vendorQuotes');
            if (container) {
                const div = document.createElement('div');
                div.className = 'line-item';
                div.innerHTML = `
                    <input type="text" placeholder="Vendor Name" class="vendor-name" value="${name}" style="width: 120px;">
                    <input type="text" placeholder="Item Description/Part #" class="vendor-desc" value="${desc}" style="flex: 2;">
                    <input type="text" placeholder="Quote #" class="vendor-quote" value="${quote}" style="width: 100px;">
                    <div style="position: relative; display: inline-block; width: 100px;">
                        <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                        <input type="number" placeholder="Amount" class="vendor-amount" step="0.01" value="${amount}" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;">
                    </div>
                    <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                `;
                container.appendChild(div);
                
                // Add event listeners to the new inputs
                const newInputs = div.querySelectorAll('input');
                newInputs.forEach(input => {
                    input.addEventListener('input', function() {
                        calculate();
                        saveLineItems();
                    });
                    input.addEventListener('change', function() {
                        calculate();
                        saveLineItems();
                    });
                });
                
                saveLineItems(); // Save after adding new item
            }
        }
        
        function addOtherMaterial(desc = '', qty = '1', amount = '') {
            const container = document.getElementById('otherMaterials');
            if (container) {
                const div = document.createElement('div');
                div.className = 'line-item';
                div.innerHTML = `
                    <input type="text" placeholder="Description" class="other-material-desc" value="${desc}" style="flex: 3;">
                    <input type="number" placeholder="Qty" class="other-material-qty" min="1" value="${qty}" oninput="calculate()" onchange="calculate()" style="width: 60px;">
                    <div style="position: relative; display: inline-block; width: 100px;">
                        <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                        <input type="number" placeholder="Amount" class="other-material-amount" step="0.01" value="${amount}" oninput="calculate()" onchange="calculate()" style="width: 100px; padding-left: 15px;">
                    </div>
                    <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                `;
                container.appendChild(div);
                
                // Add event listeners to the new inputs
                const newInputs = div.querySelectorAll('input');
                newInputs.forEach(input => {
                    input.addEventListener('input', function() {
                        calculate();
                        saveLineItems();
                    });
                    input.addEventListener('change', function() {
                        calculate();
                        saveLineItems();
                    });
                });
                
                saveLineItems(); // Save after adding new item
            }
        }
        
        function addStaffLineItem(desc = '', note = '', hours = '') {
            const container = document.getElementById('staffLineItemsContainer');
            if (container) {
                const div = document.createElement('div');
                div.className = 'line-item';
                div.innerHTML = `
                    <input type="text" placeholder="Description" class="staff-desc" value="${desc}" style="flex: 2;">
                    <input type="text" placeholder="Note" class="staff-note" value="${note}" style="flex: 3;">
                    <input type="number" placeholder="Hours" class="staff-hours" step="0.1" min="0" value="${hours}" oninput="calculate()" onchange="calculate()" style="width: 60px;">
                    <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                `;
                container.appendChild(div);
                
                // Add event listeners to the new inputs
                const newInputs = div.querySelectorAll('input');
                newInputs.forEach(input => {
                    input.addEventListener('input', function() {
                        calculate();
                        saveLineItems();
                    });
                    input.addEventListener('change', function() {
                        calculate();
                        saveLineItems();
                    });
                });
                
                saveLineItems(); // Save after adding new item
            }
        }
        
        function addCableLength(qty = '1', length = '', cableType = '1855') {
            const container = document.getElementById('cableLengths');
            if (container) {
                const div = document.createElement('div');
                div.className = 'line-item cable-line-item';
                div.innerHTML = `
                    <select class="cable-type" data-value="${cableType}" onchange="calculate(); updateCableTypeColor(this)">
                        <option value="1855" ${cableType === '1855' ? 'selected' : ''}>1855</option>
                        <option value="1505" ${cableType === '1505' ? 'selected' : ''}>1505</option>
                        <option value="1694" ${cableType === '1694' ? 'selected' : ''}>1694</option>
                        <option value="cat6" ${cableType === 'cat6' ? 'selected' : ''}>Cat6</option>
                        <option value="other" ${cableType === 'other' ? 'selected' : ''}>Other</option>
                    </select>
                    <input type="number" placeholder="Qty" class="cable-qty" min="1" value="${qty}" style="width: 60px;" oninput="calculate()" onchange="calculate()">
                    <input type="number" placeholder="Length" class="cable-length" min="1" value="${length}" style="width: 80px;" oninput="calculate()" onchange="calculate()">
                    <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                `;
                container.appendChild(div);
                calculate();
            }
        }
        
        function addVendorItem(vendorNum, desc = '', qty = '0', cost = '0') {
            const container = document.getElementById('vendor' + vendorNum + 'Items');
            if (container) {
                const div = document.createElement('div');
                div.className = 'line-item';
                div.innerHTML = `
                    <input type="text" placeholder="Description/Part #" class="vendor-item-desc" value="${desc}" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="flex: 3;">
                    <input type="number" placeholder="Qty" class="vendor-item-qty" min="1" value="${qty}" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 60px;">
                    <div style="position: relative; display: inline-block; width: 100px;">
                        <span style="position: absolute; left: 5px; top: 50%; transform: translateY(-50%); color: #666; pointer-events: none; z-index: 1;">$</span>
                        <input type="number" placeholder="Cost" class="vendor-item-cost" step="0.01" value="${cost}" oninput="updateVendorPricing()" onchange="updateVendorPricing()" style="width: 100px; padding-left: 15px;">
                    </div>
                    <button onclick="removeLineItem(this)" style="background: #e74c3c; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer; width: 24px; height: 24px;">✕</button>
                `;
                container.appendChild(div);
                
                // Add event listeners to the new inputs
                const newInputs = div.querySelectorAll('input');
                newInputs.forEach(input => {
                    input.addEventListener('input', updateVendorPricing);
                    input.addEventListener('change', updateVendorPricing);
                });
            }
        }
        
        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            const header = section.previousElementSibling;
            const icon = header.querySelector('.toggle-icon');
            
            if (section.classList.contains('expanded')) {
                // Collapse section
                section.classList.remove('expanded');
                header.classList.remove('expanded');
                icon.textContent = '▶';
            } else {
                // Expand section
                section.classList.add('expanded');
                header.classList.add('expanded');
                icon.textContent = '▼';
            }
        }
        
        function toggleBreakdown() {
            const breakdown = document.getElementById('breakdown');
            if (breakdown) {
                breakdown.classList.toggle('collapsed');
            }
        }
        
        function removeLineItem(button) {
            button.parentElement.remove();
            calculate();
        }
        
        function setCableLengthMode(mode, event) {
            try {
                cableLengthMode = mode;
                document.querySelectorAll('.toggle-group .toggle-btn').forEach(btn => {
                    if (btn && btn.classList) {
                        btn.classList.remove('active');
                    }
                });
                if (event && event.target && event.target.classList) {
                    event.target.classList.add('active');
                }
                
                const avgMode = document.getElementById('averageLengthMode');
                const calcMode = document.getElementById('calculatedLengthMode');
                
                if (mode === 'average') {
                    if (avgMode) avgMode.style.display = 'block';
                    if (calcMode) calcMode.style.display = 'none';
                } else {
                    if (avgMode) avgMode.style.display = 'none';
                    if (calcMode) calcMode.style.display = 'block';
                }
                calculate();
            } catch (error) {
                console.error('Error in setCableLengthMode:', error);
            }
        }
        
        // Function to update the project header display
        function saveLineItems() {
            // Auto-save functionality for line items
            const autoSaveEnabled = document.getElementById('autoSave') && document.getElementById('autoSave').checked;
            if (autoSaveEnabled) {
                // Debounce auto-save to avoid excessive saves
                clearTimeout(window.lineItemSaveTimeout);
                window.lineItemSaveTimeout = setTimeout(() => {
                    try {
                        const inputs = getAllInputValues();
                        const projectData = {
                            header: {
                                name: document.getElementById('projectName').value,
                                description: document.getElementById('projectDescription').value,
                                revision: document.getElementById('projectRevision').value,
                                date: document.getElementById('projectDate').value
                            },
                            inputs: inputs,
                            vendorQuotes: getVendorQuotes(),
                            otherMaterials: getOtherMaterials(),
                            staffLineItems: getStaffLineItems(),
                            cableLengths: getCableLengths(),
                            cableLengthMode: cableLengthMode,
                            vendorPricing: vendorPricing,
                            currentVendor: currentVendor,
                            autoSaveEnabled: document.getElementById('autoSave') ? document.getElementById('autoSave').checked : false
                        };
                        localStorage.setItem('autoSavedProject', JSON.stringify(projectData));
                        console.log('Line items auto-saved');
                    } catch (error) {
                        console.error('Line items auto-save error:', error);
                    }
                }, 500); // Save after 0.5 seconds of inactivity for line items
            }
        }
        
        // Function to update cable type colors
        function updateCableTypeColor(selectElement) {
            const value = selectElement.value || selectElement.getAttribute('data-value') || '1855';
            selectElement.setAttribute('data-value', value);
            
            // Apply color styling based on cable type
            selectElement.style.borderColor = '';
            selectElement.style.backgroundColor = '';
            selectElement.style.color = '';
            
            switch(value) {
                case '1855':
                    selectElement.style.borderColor = '#2e7d32';
                    selectElement.style.backgroundColor = '#e8f5e8';
                    selectElement.style.color = '#2e7d32';
                    break;
                case '1505':
                    selectElement.style.borderColor = '#1976d2';
                    selectElement.style.backgroundColor = '#e3f2fd';
                    selectElement.style.color = '#1976d2';
                    break;
                case '1694':
                    selectElement.style.borderColor = '#f57c00';
                    selectElement.style.backgroundColor = '#fff3e0';
                    selectElement.style.color = '#f57c00';
                    break;
                case 'cat6':
                    selectElement.style.borderColor = '#7b1fa2';
                    selectElement.style.backgroundColor = '#f3e5f5';
                    selectElement.style.color = '#7b1fa2';
                    break;
                case 'other':
                    selectElement.style.borderColor = '#424242';
                    selectElement.style.backgroundColor = '#fafafa';
                    selectElement.style.color = '#424242';
                    break;
            }
        }
        
        // Initialize cable type colors on page load
        function initializeCableTypeColors() {
            const cableTypes = document.querySelectorAll('.cable-type');
            cableTypes.forEach(select => {
                const value = select.value || '1855';
                select.setAttribute('data-value', value);
            });
        }
        
        function updateProjectHeader() {
            // Get values from setup inputs, only if they're actually filled
            const projectName = document.getElementById('projectName').value.trim();
            const projectDescription = document.getElementById('projectDescription').value.trim();
            const projectRevision = document.getElementById('projectRevision').value.trim();
            const projectDate = document.getElementById('projectDate').value;
            
            // Update display elements - only show if value exists
            const nameDisplay = document.getElementById('projectNameDisplay');
            const descDisplay = document.getElementById('projectDescriptionDisplay');
            const revDisplay = document.getElementById('projectRevisionDisplay');
            const dateDisplay = document.getElementById('projectDateDisplay');
            
            if (nameDisplay) {
                if (projectName) {
                nameDisplay.textContent = projectName;
                    nameDisplay.parentElement.style.display = 'block';
            } else {
                    nameDisplay.textContent = '';
                    nameDisplay.parentElement.style.display = 'none';
            }
            }
            
            if (descDisplay) {
                if (projectDescription) {
                descDisplay.textContent = projectDescription;
                    descDisplay.parentElement.style.display = 'block';
            } else {
                    descDisplay.textContent = '';
                    descDisplay.parentElement.style.display = 'none';
            }
            }
            
            if (revDisplay) {
                if (projectRevision) {
                revDisplay.textContent = projectRevision;
                    revDisplay.parentElement.style.display = 'block';
            } else {
                    revDisplay.textContent = '';
                    revDisplay.parentElement.style.display = 'none';
            }
            }
            
            if (dateDisplay) {
                if (projectDate) {
                    // Format date for better display
                    const dateObj = new Date(projectDate);
                    const formattedDate = dateObj.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                    dateDisplay.textContent = formattedDate;
                    dateDisplay.parentElement.style.display = 'block';
            } else {
                    dateDisplay.textContent = '';
                    dateDisplay.parentElement.style.display = 'none';
                }
            }
        }
        

        
        function calculate() {
            // Auto-save functionality
            const autoSaveEnabled = document.getElementById('autoSave') && document.getElementById('autoSave').checked;
            if (autoSaveEnabled) {
                // Debounce auto-save to avoid excessive saves
                clearTimeout(window.autoSaveTimeout);
                window.autoSaveTimeout = setTimeout(() => {
                    try {
                        const inputs = getAllInputValues();
                        console.log('Auto-saving inputs:', inputs);
                        const projectData = {
                            header: {
                                name: document.getElementById('projectName').value,
                                description: document.getElementById('projectDescription').value,
                                revision: document.getElementById('projectRevision').value,
                                date: document.getElementById('projectDate').value
                            },
                            inputs: inputs,
                            vendorQuotes: getVendorQuotes(),
                            otherMaterials: getOtherMaterials(),
                            staffLineItems: getStaffLineItems(),
                            cableLengths: getCableLengths(),
                            cableLengthMode: cableLengthMode,
                            vendorPricing: vendorPricing,
                            currentVendor: currentVendor,
                            autoSaveEnabled: document.getElementById('autoSave') ? document.getElementById('autoSave').checked : false
                        };
                        localStorage.setItem('autoSavedProject', JSON.stringify(projectData));
                        updateProjectHeader(); // Ensure header is updated when auto-saving
                    } catch (error) {
                        console.error('Auto-save error:', error);
                    }
                }, 1000); // Save after 1 second of inactivity
            }
            
            var cables = 0;
            if (cableLengthMode === 'average') {
                cables = parseInt(document.getElementById('numCables').value) || 0;
            }
            var termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 0;
            var timePerTerm = parseFloat(document.getElementById('timePerTermination').value) || 0;
            var runTime = parseFloat(document.getElementById('cableRunTime').value) || 0;
            var testTime = parseFloat(document.getElementById('testingTime').value) || 0;
            var rackTime = parseFloat(document.getElementById('rackSetupTime').value) || 0;
            var labelingTime = parseFloat(document.getElementById('labelingTime').value) || 0;
            var cleanupTime = parseFloat(document.getElementById('cleanupTime').value) || 0;
            var cutoverTime = parseFloat(document.getElementById('cutoverTime').value) || 0;
            var decommissioningTime = parseFloat(document.getElementById('decommissioningTime').value) || 0;
            var hoursPerDay = parseInt(document.getElementById('workHoursPerDay').value) || 8;
            // Get connector and cable costs from configuration fields for inventory cost indication only
            var termCost = parseFloat(document.getElementById('terminationCost').value) || 0;
            var cableCost = parseFloat(document.getElementById('cableCostPerFoot').value) || 0;
            
            // Check if there are vendor line items for cable/termination pricing
            var hasVendorCablePricing = false;
            var hasVendorTerminationPricing = false;
            
            // Check all active vendors for cable/termination pricing items
            for (let i = 1; i <= 3; i++) {
                if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].items) {
                    vendorPricing[i].items.forEach(item => {
                        const desc = item.desc.toLowerCase();
                        if (desc.includes('cable') || desc.includes('per foot') || desc.includes('ft')) {
                            hasVendorCablePricing = true;
                        }
                        if (desc.includes('connector') || desc.includes('termination') || desc.includes('bnc') || desc.includes('cat6') || desc.includes('rj45')) {
                            hasVendorTerminationPricing = true;
                        }
                    });
                }
            }
            
            // Only use Setup Configuration values if there are NO vendor line items for that cable type
            // These values are for cost indication against standing inventory/reserves only
            if (hasVendorCablePricing) {
                cableCost = 0; // Don't use Setup value if vendor has cable pricing
            }
            if (hasVendorTerminationPricing) {
                termCost = 0; // Don't use Setup value if vendor has termination pricing
            }
            var length = 0;
            var totalCableQuantity = 0;
            
            if (cableLengthMode === 'average') {
                length = parseInt(document.getElementById('avgCableLength').value) || 0;
                totalCableQuantity = cables;
            } else {
                // Calculate total length and quantity from cable lengths and quantities
                document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                    const cableLength = parseFloat(item.querySelector('.cable-length').value) || 0;
                    const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                    length += (cableLength * qty);
                    totalCableQuantity += qty;
                });
                
                // Update the calculated totals display
                document.getElementById('calculatedTotalCables').textContent = totalCableQuantity;
                document.getElementById('calculatedTotalLength').textContent = length + ' ft';
            }
            var spoolLength = parseInt(document.getElementById('spoolLength').value);
            if (isNaN(spoolLength)) spoolLength = 1000;
            var wasteFactor = parseFloat(document.getElementById('wasteFactor').value);
            if (isNaN(wasteFactor)) wasteFactor = 0;
            var connectorWasteFactor = parseFloat(document.getElementById('connectorWasteFactor').value);
            if (isNaN(connectorWasteFactor)) connectorWasteFactor = 0;
            var useOvertime = document.getElementById('overtimeToggle').checked;
            

            
            var totalTerms = totalCableQuantity * termsPerCable;
            var termHours = (totalTerms * timePerTerm) / 60; // Convert minutes to hours
            var runHours = (totalCableQuantity * runTime) / 60;
            var testHours = (totalCableQuantity * testTime) / 60;
            var labelingHours = (totalCableQuantity * labelingTime) / 60;
            var totalHours = termHours + runHours + testHours + rackTime + labelingHours + cleanupTime + cutoverTime + decommissioningTime;
            
            // Labor calculation based on mode
            var laborCost = 0;
            var laborDetails = '';
            
            if (currentLaborMode === 'single') {
                var techs = parseInt(document.getElementById('numTechnicians').value);
                if (isNaN(techs)) techs = 0;
                var rate = parseFloat(document.getElementById('hourlyRate').value) || 0;
                var workHours = techs > 0 ? totalHours / techs : 0;
                var days = workHours / hoursPerDay;
            
            if (useOvertime && workHours > 8) {
                var regularHours = Math.min(workHours, 8);
                var overtimeHours = Math.min(workHours - 8, 4);
                var doubleTimeHours = Math.max(workHours - 12, 0);
                
                var regularPay = regularHours * rate;
                var overtimePay = overtimeHours * rate * 1.5;
                var doubleTimePay = doubleTimeHours * rate * 2;
                
                laborCost = Math.ceil((regularPay + overtimePay + doubleTimePay) * techs);
                
                if (doubleTimeHours > 0) {
                    laborDetails = techs + ' techs: ' + regularHours.toFixed(1) + 'hrs@$' + rate + ', ' + 
                                  overtimeHours.toFixed(1) + 'hrs@$' + (rate * 1.5).toFixed(0) + ', ' +
                                  doubleTimeHours.toFixed(1) + 'hrs@$' + (rate * 2).toFixed(0);
                } else if (overtimeHours > 0) {
                    laborDetails = techs + ' techs: ' + regularHours.toFixed(1) + 'hrs@$' + rate + ', ' + 
                                  overtimeHours.toFixed(1) + 'hrs@$' + (rate * 1.5).toFixed(0);
                }
            } else {
                laborCost = Math.ceil(workHours * techs * rate);
                laborDetails = techs + ' techs × ' + workHours.toFixed(1) + ' hrs × $' + rate + '/hr';
            }
            } else {
                var leads = parseInt(document.getElementById('numLeads').value) || 0;
                var techs = parseInt(document.getElementById('numTechs').value) || 0;
                var leadRate = parseFloat(document.getElementById('leadRate').value) || 0;
                var techRate = parseFloat(document.getElementById('techRate').value) || 0;
                
                var leadHours = totalHours * 0.3; // 30% of time for lead
                var techHours = totalHours * 0.7; // 70% of time for techs
                
                var leadCost = Math.ceil(leadHours * leads * leadRate);
                var techCost = Math.ceil(techHours * techs * techRate);
                laborCost = leadCost + techCost;
                
                laborDetails = leads + ' leads × ' + leadHours.toFixed(1) + ' hrs × $' + leadRate + '/hr + ' +
                              techs + ' techs × ' + techHours.toFixed(1) + ' hrs × $' + techRate + '/hr';
            }
            
            var cableMat = 0;
            if (cableLengthMode === 'average') {
                cableMat = Math.ceil(totalCableQuantity * length * cableCost);
            } else {
                // Calculate cable cost based on individual lengths and quantities
                document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                    const cableLength = parseFloat(item.querySelector('.cable-length').value) || 0;
                    const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                    cableMat += Math.ceil(cableLength * qty * cableCost);
                });
            }
            var termMat = Math.ceil(totalTerms * termCost * (1 + (connectorWasteFactor || 0) / 100)); // Apply connector waste factor
            var totalMat = cableMat + termMat;
            
            // Calculate vendor quotes total
            var vendorQuotesTotal = 0;
            document.querySelectorAll('#vendorQuotes .line-item').forEach(item => {
                const amount = parseFloat(item.querySelector('.vendor-amount').value) || 0;
                vendorQuotesTotal += amount;
            });
            
            // Calculate orders total
            var activeVendorTotal = 0;
            var totalCableOrdered = 0;
            var cableTypeOrdered = {}; // Track cable types ordered
            var typeMismatches = []; // Initialize typeMismatches array
            
            for (let i = 1; i <= 3; i++) {
                console.log(`Checking vendor ${i}:`, vendorPricing[i] ? 'exists' : 'null', vendorPricing[i] ? vendorPricing[i].active : 'N/A');
                if (vendorPricing[i] && vendorPricing[i].active) {
                    vendorPricing[i].items.forEach(item => {
                        const itemTotal = (item.qty || 1) * (item.cost || 0);
                        activeVendorTotal += itemTotal;
                        
                        // Check if this is a cable item (look for cable-related keywords)
                        const desc = item.desc.toLowerCase();
                        if (desc.includes('cable') || desc.includes('ft') || desc.includes('foot') || desc.includes('cat6') || desc.includes('cat5') || desc.includes('1855') || desc.includes('1505') || desc.includes('1694') || desc.includes('network') || desc.includes('box')) {
                            console.log('Processing cable item:', item.desc, 'qty:', item.qty);
                            const qty = parseFloat(item.qty) || 1;
                            
                            // Try to extract length from description or use quantity as feet
                            let cableLength = qty;
                            console.log('Initial cableLength:', cableLength, 'for item:', item.desc);
                            
                            // Look for common patterns in descriptions
                            const lengthMatch = desc.match(/(\d+)\s*(?:ft|foot|feet|')/i);
                            if (lengthMatch) {
                                cableLength = parseInt(lengthMatch[1]) * qty;
                            } else if (desc.includes('spool') || desc.includes('roll') || desc.includes('1000')) {
                                cableLength = qty * 1000; // Standard spool
                            } else if (desc.includes('box')) {
                                cableLength = qty * 1000; // Standard box (1000ft)
                            } else if (desc.includes('500')) {
                                cableLength = qty * 500; // 500ft spool
                            }
                            
                            console.log('Final cableLength:', cableLength, 'for item:', item.desc);
                            
                            totalCableOrdered += cableLength;
                            
                            // Determine cable type from description
                            let cableType = 'unknown';
                            if (desc.includes('1855')) cableType = '1855';
                            else if (desc.includes('1505')) cableType = '1505';
                            else if (desc.includes('1694')) cableType = '1694';
                            else if (desc.includes('cat6') || desc.includes('network')) cableType = 'cat6';
                            else if (desc.includes('cat5')) cableType = 'cat5';
                            
                            if (!cableTypeOrdered[cableType]) {
                                cableTypeOrdered[cableType] = 0;
                            }
                            cableTypeOrdered[cableType] += cableLength;
                            console.log('Added to cableTypeOrdered:', cableType, cableLength, 'Total for type:', cableTypeOrdered[cableType]);
                        }
                    });
                }
            }
            
            console.log('Final cableTypeOrdered:', cableTypeOrdered);
            console.log('Final totalCableOrdered:', totalCableOrdered);
            
            // Calculate other materials total (this is the equipment cost)
            var otherMaterialsTotal = 0;
            document.querySelectorAll('#otherMaterials .line-item').forEach(item => {
                const qty = parseFloat(item.querySelector('.other-material-qty').value) || 1;
                const amount = parseFloat(item.querySelector('.other-material-amount').value) || 0;
                const itemTotal = qty * amount;
                otherMaterialsTotal += itemTotal;
            });
            
            // Equipment costs (per project) - calculated from other materials
            var equipmentCost = otherMaterialsTotal;
            
            // Calculate staff hours total
            var staffHoursTotal = 0;
            document.querySelectorAll('#staffLineItems .line-item').forEach(item => {
                const hours = parseFloat(item.querySelector('.staff-hours').value) || 0;
                staffHoursTotal += hours;
            });
            
            // Calculate total cost - Setup Configuration values are for inventory cost indication only, not factored into total
            var totalCost = laborCost + equipmentCost + vendorQuotesTotal + activeVendorTotal;
            
            var totalCableNeeded = length;
            var totalWithWaste = totalCableNeeded * (1 + (wasteFactor || 0) / 100);
            var spoolsRequired = spoolLength > 0 ? Math.ceil(totalWithWaste / spoolLength) : 0;
            
            // Debug spool calculation
            console.log('Spool calculation debug:', {
                totalCableNeeded: totalCableNeeded,
                wasteFactor: wasteFactor,
                totalWithWaste: totalWithWaste,
                spoolLength: spoolLength,
                spoolsRequired: spoolsRequired
            });
            
            // Check for spool mismatch with active vendor cable orders
            var spoolMismatch = false;
            var mismatchMessage = '';
            console.log('Checking notification conditions: totalCableOrdered =', totalCableOrdered, 'spoolsRequired =', spoolsRequired);
            
            // Check for cable type mismatches regardless of spool mismatch
            var configuredCableTypes = {};
            if (cableLengthMode === 'average') {
                const avgCableType = document.querySelector('#averageLengthMode .cable-type');
                if (avgCableType) {
                    const type = avgCableType.value;
                    if (!configuredCableTypes[type]) configuredCableTypes[type] = 0;
                    configuredCableTypes[type] = totalCableQuantity;
                }
            } else {
                // Calculated mode - check each line item
                document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                    const cableType = item.querySelector('.cable-type').value;
                    const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                    const length = parseFloat(item.querySelector('.cable-length').value) || 0;
                    const totalLength = qty * length;
                    
                    if (!configuredCableTypes[cableType]) configuredCableTypes[cableType] = 0;
                    configuredCableTypes[cableType] += totalLength;
                });
            }
            
            console.log('Configured cable types:', configuredCableTypes);
            
            if (totalCableOrdered > 0 && spoolsRequired > 0) {
                var cablePerSpool = spoolLength;
                var calculatedCableNeeded = spoolsRequired * cablePerSpool;
                if (Math.abs(totalCableOrdered - calculatedCableNeeded) > 10) { // Allow 10ft tolerance
                    spoolMismatch = true;
                    var needToOrder = Math.max(0, calculatedCableNeeded - totalCableOrdered);
                    mismatchMessage = `Cable ordered: ${totalCableOrdered}ft\nCalculated need: ${calculatedCableNeeded}ft\nNeed to order: ${needToOrder}ft`;
                }
                
                // Add cable type mismatch details to message
                for (const [type, configured] of Object.entries(configuredCableTypes)) {
                    const ordered = cableTypeOrdered[type] || 0;
                    if (Math.abs(configured - ordered) > 10) {
                        typeMismatches.push(`${type}: ${configured}ft configured, ${ordered}ft ordered`);
                    }
                }
                
                if (typeMismatches.length > 0) {
                    if (mismatchMessage) {
                        mismatchMessage += '\n\nCable Type Mismatches:';
                    } else {
                        mismatchMessage = 'Cable Type Mismatches:';
                    }
                    typeMismatches.forEach(mismatch => {
                        mismatchMessage += '\n' + mismatch;
                    });
                    
                    // Add specific order requirements by type
                    mismatchMessage += '\n\nNeed to order by type:';
                    for (const [type, configured] of Object.entries(configuredCableTypes)) {
                        const ordered = cableTypeOrdered[type] || 0;
                        const needToOrder = Math.max(0, configured - ordered);
                        if (needToOrder > 0) {
                            // Handle Cat6/network cable differently (boxes vs spools)
                            if (type === 'cat6' || type.toLowerCase().includes('network')) {
                                const boxesNeeded = Math.ceil(needToOrder / 1000);
                                mismatchMessage += `\n${type}: ${needToOrder}ft (${boxesNeeded} box${boxesNeeded > 1 ? 'es' : ''})`;
                            } else {
                                const spoolsNeeded = Math.ceil(needToOrder / spoolLength);
                                mismatchMessage += `\n${type}: ${needToOrder}ft (${spoolsNeeded} spool${spoolsNeeded > 1 ? 's' : ''})`;
                            }
                        }
                    }
                }
            }
            
            // Show notification if there are spool mismatches OR type mismatches
            if (spoolMismatch || typeMismatches.length > 0) {
                spoolMismatch = true; // Use this flag to show the notification
            }
            
            var workHours = totalHours / Math.max(1, (currentLaborMode === 'single' ? parseInt(document.getElementById('numTechnicians').value) || 1 : 
                                                     (parseInt(document.getElementById('numLeads').value) || 0) + (parseInt(document.getElementById('numTechs').value) || 0)));
            var days = workHours / hoursPerDay;
            
            document.getElementById('totalTerminations').textContent = totalTerms;
            document.getElementById('totalCables').textContent = totalCableQuantity;
            document.getElementById('terminationHours').textContent = termHours.toFixed(1) + ' hrs';
            document.getElementById('terminationDetails').textContent = (totalTerms * timePerTerm).toFixed(1) + ' minutes';
            document.getElementById('projectDays').textContent = days.toFixed(1) + ' days';
            document.getElementById('totalHours').textContent = totalHours.toFixed(1) + ' total hours';
            document.getElementById('laborCost').textContent = '$' + laborCost;
            document.getElementById('laborDetails').textContent = laborDetails;

            document.getElementById('equipmentCost').textContent = '$' + equipmentCost;
            document.getElementById('vendorQuotesTotal').textContent = '$' + vendorQuotesTotal;
            document.getElementById('activeVendorTotal').textContent = '$' + activeVendorTotal;
            document.getElementById('staffHoursTotal').textContent = staffHoursTotal.toFixed(1);
            document.getElementById('spoolsRequired').textContent = spoolsRequired;
            document.getElementById('spoolDetails').textContent = totalCableNeeded + 'ft needed + ' + wasteFactor + '% waste';
            document.getElementById('totalCost').textContent = '$' + totalCost;
            
            // Cable mismatch logic moved to reconciliation tab
            // Store cable mismatch data for reconciliation use
            window.cableMismatchData = {
                hasMismatch: spoolMismatch || typeMismatches.length > 0,
                message: mismatchMessage,
                configuredCableTypes: configuredCableTypes,
                cableTypeOrdered: cableTypeOrdered,
                typeMismatches: typeMismatches,
                totalCableOrdered: totalCableOrdered,
                spoolsRequired: spoolsRequired,
                spoolLength: spoolLength
            };
            
            document.getElementById('breakdownTermination').textContent = termHours.toFixed(1) + ' hours';
            document.getElementById('breakdownRunning').textContent = runHours.toFixed(1) + ' hours';
            document.getElementById('breakdownTesting').textContent = testHours.toFixed(1) + ' hours';
            document.getElementById('breakdownLabeling').textContent = labelingHours.toFixed(1) + ' hours';
            document.getElementById('breakdownCleanup').textContent = cleanupTime.toFixed(1) + ' hours';
            document.getElementById('breakdownCutover').textContent = cutoverTime.toFixed(1) + ' hours';
            document.getElementById('breakdownDecommissioning').textContent = decommissioningTime.toFixed(1) + ' hours';
            document.getElementById('breakdownRack').textContent = rackTime.toFixed(1) + ' hours';
            document.getElementById('breakdownTotal').textContent = totalHours.toFixed(1) + ' hours';
            
            // Update project header to ensure it's always synchronized
            updateProjectHeader();
        }
        
        function showChart() {
            var canvas = document.getElementById('projectChart');
            var ctx = canvas.getContext('2d');
            
            var termHours = parseFloat(document.getElementById('breakdownTermination').textContent) || 0;
            var runHours = parseFloat(document.getElementById('breakdownRunning').textContent) || 0;
            var testHours = parseFloat(document.getElementById('breakdownTesting').textContent) || 0;
            var labelingHours = parseFloat(document.getElementById('breakdownLabeling').textContent) || 0;
            var cleanupHours = parseFloat(document.getElementById('breakdownCleanup').textContent) || 0;
            var cutoverHours = parseFloat(document.getElementById('breakdownCutover').textContent) || 0;
            var decommissioningHours = parseFloat(document.getElementById('breakdownDecommissioning').textContent) || 0;
            var rackHours = parseFloat(document.getElementById('breakdownRack').textContent) || 0;
            
            var data = [termHours, runHours, testHours, labelingHours, cleanupHours, cutoverHours, decommissioningHours, rackHours];
            var labels = ['Termination', 'Cable Running', 'Testing', 'Labeling', 'Cleanup', 'Cutover', 'Decommissioning', 'Rack Setup'];
            var colors = ['#3498db', '#e74c3c', '#f39c12', '#9b59b6', '#1abc9c', '#34495e', '#e67e22', '#27ae60'];
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw title
            ctx.fillStyle = '#333';
            ctx.font = 'bold 16px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Project Time Breakdown', canvas.width / 2, 30);
            
            var total = data.reduce(function(a, b) { return a + b; }, 0);
            var centerX = canvas.width / 2;
            var centerY = canvas.height / 2;
            var radius = Math.min(centerX, centerY) - 120; // Smaller radius for better spacing
            
            var currentAngle = -Math.PI / 2;
            
            // Draw pie chart
            for (var i = 0; i < data.length; i++) {
                if (data[i] > 0) {
                    var sliceAngle = (data[i] / total) * 2 * Math.PI;
                    
                    ctx.beginPath();
                    ctx.moveTo(centerX, centerY);
                    ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
                    ctx.closePath();
                    ctx.fillStyle = colors[i];
                    ctx.fill();
                    ctx.strokeStyle = '#fff';
                    ctx.lineWidth = 2;
                    ctx.stroke();
                    
                    currentAngle += sliceAngle;
                }
            }
            
            // Draw legend
            var legendX = 20;
            var legendY = 60;
            var legendSpacing = 25;
            
            for (var i = 0; i < data.length; i++) {
                if (data[i] > 0) {
                    // Draw color box
                    ctx.fillStyle = colors[i];
                    ctx.fillRect(legendX, legendY, 15, 15);
                    ctx.strokeStyle = '#333';
                    ctx.lineWidth = 1;
                    ctx.strokeRect(legendX, legendY, 15, 15);
                    
                    // Draw label
                    ctx.fillStyle = '#333';
                    ctx.font = '12px Arial';
                    ctx.textAlign = 'left';
                    ctx.fillText(labels[i] + ': ' + data[i].toFixed(1) + 'h', legendX + 20, legendY + 12);
                    
                    legendY += legendSpacing;
                }
            }
            
            document.getElementById('chartContainer').style.display = 'block';
        }
        
        function showCostChart() {
            var canvas = document.getElementById('projectChart');
            var ctx = canvas.getContext('2d');
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw title
            ctx.fillStyle = '#333';
            ctx.font = 'bold 16px Arial';
                    ctx.textAlign = 'center';
            ctx.fillText('Project Cost Breakdown', canvas.width / 2, 30);
            
            // Collect cost data from various sources
            var data = [];
            var labels = [];
            var colors = ['#3498db', '#e74c3c', '#f39c12', '#9b59b6', '#1abc9c', '#34495e', '#e67e22', '#27ae60', '#8e44ad', '#16a085'];
            
            // Get vendor pricing data (active vendors only)
            for (let i = 1; i <= 3; i++) {
                if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].name) {
                    let vendorTotal = 0;
                    if (vendorPricing[i].items) {
                        vendorPricing[i].items.forEach(item => {
                            vendorTotal += (parseFloat(item.qty) || 0) * (parseFloat(item.cost) || 0);
                        });
                    }
                    if (vendorTotal > 0) {
                        data.push(vendorTotal);
                        labels.push(vendorPricing[i].name || `Vendor ${i}`);
                    }
                }
            }
            
            // Get vendor quotes data
            document.querySelectorAll('#vendorQuotes .line-item').forEach(item => {
                const amount = parseFloat(item.querySelector('.vendor-amount').value) || 0;
                const name = item.querySelector('.vendor-name').value || 'Vendor Quote';
                if (amount > 0) {
                    data.push(amount);
                    labels.push(name);
                }
            });
            
            // Get other materials data
            document.querySelectorAll('#otherMaterials .line-item').forEach(item => {
                const qty = parseFloat(item.querySelector('.other-material-qty').value) || 0;
                const amount = parseFloat(item.querySelector('.other-material-amount').value) || 0;
                const desc = item.querySelector('.other-material-desc').value || 'Material';
                const total = qty * amount;
                if (total > 0) {
                    data.push(total);
                    labels.push(desc);
                }
            });
            
            // If no specific data, show summary totals
            if (data.length === 0) {
                var equipmentCost = parseFloat(document.getElementById('equipmentCost').textContent.replace('$', '').replace(',', '')) || 0;
                var vendorQuotesTotal = parseFloat(document.getElementById('vendorQuotesTotal').textContent.replace('$', '').replace(',', '')) || 0;
                var activeVendorTotal = parseFloat(document.getElementById('activeVendorTotal').textContent.replace('$', '').replace(',', '')) || 0;
                
                data = [equipmentCost, vendorQuotesTotal, activeVendorTotal];
                labels = ['Supplies & Expendables', 'Vendor Quotes', 'Active Vendor'];
            }
            
            var total = data.reduce(function(a, b) { return a + b; }, 0);
            var centerX = canvas.width / 2;
            var centerY = canvas.height / 2;
            var radius = Math.min(centerX, centerY) - 120; // Smaller radius for better spacing
            
            var currentAngle = -Math.PI / 2;
            
            // Draw pie chart
            for (var i = 0; i < data.length; i++) {
                if (data[i] > 0) {
                    var sliceAngle = (data[i] / total) * 2 * Math.PI;
                    
                    ctx.beginPath();
                    ctx.moveTo(centerX, centerY);
                    ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
                    ctx.closePath();
                    ctx.fillStyle = colors[i % colors.length];
                    ctx.fill();
                    ctx.strokeStyle = '#fff';
                    ctx.lineWidth = 2;
                    ctx.stroke();
                    
                    currentAngle += sliceAngle;
                }
            }
            
            // Draw legend
            var legendX = 20;
            var legendY = 60;
            var legendSpacing = 25;
            
            for (var i = 0; i < data.length; i++) {
                if (data[i] > 0) {
                    // Draw color box
                    ctx.fillStyle = colors[i % colors.length];
                    ctx.fillRect(legendX, legendY, 15, 15);
                    ctx.strokeStyle = '#333';
                    ctx.lineWidth = 1;
                    ctx.strokeRect(legendX, legendY, 15, 15);
                    
                    // Draw label
                    ctx.fillStyle = '#333';
                    ctx.font = '12px Arial';
                    ctx.textAlign = 'left';
                    ctx.fillText(labels[i] + ': $' + data[i].toLocaleString(), legendX + 20, legendY + 12);
                    
                    legendY += legendSpacing;
                }
            }
            
            document.getElementById('chartContainer').style.display = 'block';
        }
        
        function hideChart() {
            document.getElementById('chartContainer').style.display = 'none';
        }
        
        function exportCSV() {
            var csvData = [];
            csvData.push('Server Rack Wiring Project Estimate');
            csvData.push('Generated on: ' + new Date().toLocaleDateString());
            csvData.push('Project Name: ' + (document.getElementById('projectName').value || 'Unnamed Project'));
            csvData.push('Vendor: ' + currentVendor);
            csvData.push('Labor Mode: ' + currentLaborMode);
            csvData.push('');
            csvData.push('INPUTS');
            csvData.push('Number of Cables,' + document.getElementById('numCables').value);
            csvData.push('Total Cable Quantity,' + document.getElementById('totalCables').textContent);
            csvData.push('Terminations per Cable,' + document.getElementById('terminationsPerCable').value);
            csvData.push('Time per Termination (minutes),' + document.getElementById('timePerTermination').value);
            csvData.push('Cable Running Time (min/cable),' + document.getElementById('cableRunTime').value);
            csvData.push('Testing Time (min/cable),' + document.getElementById('testingTime').value);
            csvData.push('Rack Setup Time (hours),' + document.getElementById('rackSetupTime').value);
            csvData.push('Labeling Time (min/cable),' + document.getElementById('labelingTime').value);
            csvData.push('Cleanup Time (hours),' + document.getElementById('cleanupTime').value);
            csvData.push('Cutover Time (hours),' + document.getElementById('cutoverTime').value);
            csvData.push('Decommissioning Time (hours),' + document.getElementById('decommissioningTime').value);
            
            if (currentLaborMode === 'single') {
            csvData.push('Number of Technicians,' + document.getElementById('numTechnicians').value);
            csvData.push('Hourly Rate ($),' + document.getElementById('hourlyRate').value);
            } else {
                csvData.push('Number of Leads,' + document.getElementById('numLeads').value);
                csvData.push('Lead Rate ($/hr),' + document.getElementById('leadRate').value);
                csvData.push('Number of Techs,' + document.getElementById('numTechs').value);
                csvData.push('Tech Rate ($/hr),' + document.getElementById('techRate').value);
            }
            
            csvData.push('Work Hours per Day,' + document.getElementById('workHoursPerDay').value);
            csvData.push('Cost per Termination ($),' + document.getElementById('terminationCost').value);
            csvData.push('Cable Cost ($/foot),' + document.getElementById('cableCostPerFoot').value);
            csvData.push('Average Cable Length (feet),' + document.getElementById('avgCableLength').value);
            csvData.push('Cable Spool Length (feet),' + document.getElementById('spoolLength').value);
            csvData.push('Cable Waste Factor (%),' + document.getElementById('wasteFactor').value);
            csvData.push('Connector Waste Factor (%),' + document.getElementById('connectorWasteFactor').value);
            csvData.push('Apply Overtime,' + (document.getElementById('overtimeToggle').checked ? 'Yes' : 'No'));
            csvData.push('');
            
            // Add Cable Configuration Details
            csvData.push('CABLE CONFIGURATION');
            // Check which mode is active
            const avgMode = document.getElementById('averageLengthMode');
            const calcMode = document.getElementById('calculatedLengthMode');
            if (avgMode && avgMode.style.display !== 'none') {
                csvData.push('Configuration Mode: Average Length');
                const avgCableType = document.querySelector('#averageLengthMode .cable-type');
                const avgCableQty = document.querySelector('#averageLengthMode .cable-qty');
                const avgLength = document.querySelector('#averageLengthMode .avg-length-input');
                if (avgCableType && avgCableQty && avgLength) {
                    csvData.push('Cable Type: ' + avgCableType.value);
                    csvData.push('Cable Quantity: ' + avgCableQty.value);
                    csvData.push('Average Length: ' + avgLength.value + ' feet');
                }
            } else if (calcMode && calcMode.style.display !== 'none') {
                csvData.push('Configuration Mode: Calculated Length');
                // Get all cable line items in calculated mode
                const cableItems = document.querySelectorAll('#calculatedLengthMode .cable-line-item');
                cableItems.forEach((item, index) => {
                    const cableType = item.querySelector('.cable-type');
                    const cableQty = item.querySelector('.cable-qty');
                    const cableLength = item.querySelector('.cable-length');
                    if (cableType && cableQty && cableLength && (cableType.value || cableQty.value || cableLength.value)) {
                        csvData.push('Cable ' + (index + 1) + ' - Type: ' + cableType.value + ', Quantity: ' + cableQty.value + ', Length: ' + cableLength.value + ' feet');
                    }
                });
            }
            csvData.push('');
            
            // Add Individual Vendor Quotes
            csvData.push('VENDOR QUOTES DETAILS');
            const vendorQuotes = getVendorQuotes();
            if (vendorQuotes && vendorQuotes.length > 0) {
                csvData.push('Vendor Name,Description/Part #,Quote #,Amount');
                vendorQuotes.forEach(quote => {
                    csvData.push('"' + (quote.name || '') + '","' + (quote.desc || '') + '","' + (quote.quote || '') + '",$' + (quote.amount || '0'));
                });
            } else {
                csvData.push('No vendor quotes entered');
            }
            csvData.push('');
            
            // Add Individual Other Materials
            csvData.push('OTHER MATERIALS DETAILS');
            const otherMaterials = getOtherMaterials();
            if (otherMaterials && otherMaterials.length > 0) {
                csvData.push('Description,Quantity,Amount');
                otherMaterials.forEach(material => {
                    csvData.push('"' + (material.desc || '') + '",' + (material.qty || '1') + ',$' + (material.amount || '0'));
                });
            } else {
                csvData.push('No other materials entered');
            }
            csvData.push('');
            
            // Add Reconciliation History
            csvData.push('RECONCILIATION HISTORY');
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                if (reconciliationHistory && reconciliationHistory.length > 0) {
                    csvData.push('Date,Time,Project,Vendor,Total Required,BNC Required,BNC Ordered,BNC Status,Cat6 Required,Cat6 Ordered,Cat6 Status,Cable Ordered,Cable Spools,Cable Status,ISO Timestamp');
                    
                    // Show last 10 reconciliations
                    const recentReconciliations = reconciliationHistory.slice(-10);
                    recentReconciliations.forEach(recon => {
                        const cableOrdered = recon.cables ? recon.cables.totalOrdered : 0;
                        const cableSpools = recon.cables ? recon.cables.spoolsRequired : 0;
                        const cableStatus = recon.cables ? recon.cables.status : 'N/A';
                        csvData.push(`"${recon.formatDate}","${recon.formatTime}","${recon.projectName}","${recon.vendor}",${recon.totalRequired},${recon.bnc.required},${recon.bnc.ordered},"${recon.bnc.status}",${recon.cat6.required},${recon.cat6.ordered},"${recon.cat6.status}",${cableOrdered},${cableSpools},"${cableStatus}","${recon.timestamp}"`);
                    });
                } else {
                    csvData.push('No reconciliation history available');
                }
            } catch (error) {
                csvData.push('Error loading reconciliation history: ' + error.message);
            }
            csvData.push('');
            
            csvData.push('RESULTS');
            csvData.push('Total Terminations,' + document.getElementById('totalTerminations').textContent);
            csvData.push('Termination Time,' + document.getElementById('terminationHours').textContent);
            csvData.push('Project Duration,' + document.getElementById('projectDays').textContent);
            csvData.push('Labor Cost,' + document.getElementById('laborCost').textContent);
            csvData.push('Supplies & Expendables,' + document.getElementById('equipmentCost').textContent);
            csvData.push('Vendor Quotes Total,' + document.getElementById('vendorQuotesTotal').textContent);
            csvData.push('Orders Total,' + document.getElementById('activeVendorTotal').textContent);
            csvData.push('Staff Hours Total,' + document.getElementById('staffHoursTotal').textContent);
            csvData.push('Cable Spools Required,' + document.getElementById('spoolsRequired').textContent);
            csvData.push('Total Project Cost,' + document.getElementById('totalCost').textContent);
            csvData.push('');
            csvData.push('TIME BREAKDOWN');
            csvData.push('Termination Work,' + document.getElementById('breakdownTermination').textContent);
            csvData.push('Cable Running,' + document.getElementById('breakdownRunning').textContent);
            csvData.push('Testing & Verification,' + document.getElementById('breakdownTesting').textContent);
            csvData.push('Labeling,' + document.getElementById('breakdownLabeling').textContent);
            csvData.push('Cleanup,' + document.getElementById('breakdownCleanup').textContent);
            csvData.push('Cutover,' + document.getElementById('breakdownCutover').textContent);
            csvData.push('Decommissioning,' + document.getElementById('breakdownDecommissioning').textContent);
            csvData.push('Rack Setup,' + document.getElementById('breakdownRack').textContent);
            csvData.push('Total Project Time,' + document.getElementById('breakdownTotal').textContent);

            var csvContent = csvData.join('\n');
            var blob = new Blob([csvContent], { type: 'text/csv' });
            var url = window.URL.createObjectURL(blob);
            
            var a = document.createElement('a');
            a.href = url;
            a.download = 'wiring_project_estimate.csv';
            a.click();
            
            window.URL.revokeObjectURL(url);
            
            // Log CSV export action
            logProjectChange('CSV Exported', 'Project data exported to CSV file');
        }
        
        // Landscape detection and header optimization
        function checkLandscapeAndOptimize() {
            const isLandscape = window.innerWidth > window.innerHeight;
            const isMobile = window.innerWidth <= 1000;
            const projectHeader = document.querySelector('.project-header');
            const mainLayout = document.querySelector('.main-layout');
            
            if (isLandscape && isMobile && projectHeader) {
                projectHeader.classList.add('landscape-compact');
                if (mainLayout) {
                    mainLayout.style.height = 'calc(100vh - 100px)';
                    mainLayout.style.marginTop = '0px';
                }
            } else if (projectHeader) {
                projectHeader.classList.remove('landscape-compact');
                if (mainLayout) {
                    mainLayout.style.height = 'calc(100vh - 200px)';
                    mainLayout.style.marginTop = '15px';
                }
            }
        }
        
        // Mobile collapsible sections functionality
        function toggleMobileSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.classList.toggle('collapsed');
            }
        }
        
        // Check on load and resize
        window.addEventListener('resize', checkLandscapeAndOptimize);
        
        window.addEventListener('load', function() {
            // loadLineItems() removed - now using unified autoSavedProject loading
            
            // Set current date
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('projectDate').value = today;
            
            // Initialize project header display
            updateProjectHeader();
            console.log('Initialized project header display');
            
            var inputs = document.querySelectorAll('input');
            for (var i = 0; i < inputs.length; i++) {
                inputs[i].addEventListener('input', calculate);
                inputs[i].addEventListener('change', calculate);
            }
            
            // Ensure cable configuration inputs have event listeners
            const cableInputs = document.querySelectorAll('#numCables, #avgCableLength');
            cableInputs.forEach(input => {
                input.addEventListener('input', function() {
                    console.log('Page load cable input changed:', input.id, input.value);
            calculate();
        });
                input.addEventListener('change', function() {
                    console.log('Page load cable change event:', input.id, input.value);
                    calculate();
                });
            });
            
            // Ensure calculated mode cable inputs have event listeners
            const calculatedCableInputs = document.querySelectorAll('.cable-length, .cable-qty');
            calculatedCableInputs.forEach(input => {
                input.addEventListener('input', function() {
                    console.log('Page load calculated input changed:', input.className, input.value);
                    calculate();
                });
                input.addEventListener('change', function() {
                    console.log('Page load calculated change event:', input.className, input.value);
                    calculate();
                });
            });
            
            // Add specific event listeners for vendor pricing inputs
            for (let i = 1; i <= 3; i++) {
                const vendorNameElement = document.getElementById('vendor' + i + 'Name');
                if (vendorNameElement) {
                    vendorNameElement.addEventListener('change', updateVendorPricing);
                }
                // Note: vendor active state is handled by toggleVendorActive() function, not by input elements
            }
            
            // Add event listeners to initial line items
            addEventListenersToLineItems();
            
            // Check landscape and optimize header
            checkLandscapeAndOptimize();
            
            // Auto-load functionality
            const autoSavedProject = localStorage.getItem('autoSavedProject');
            console.log('Raw autoSavedProject from localStorage:', autoSavedProject);
            if (autoSavedProject) {
                try {
                    const projectData = JSON.parse(autoSavedProject);
                    console.log('Parsed project data:', projectData);
                    console.log('Project data inputs:', projectData.inputs);
                    loadProjectData(projectData);
                    updateProjectHeader(); // Ensure header is updated after auto-load
                    console.log('Auto-saved project loaded successfully');
                } catch (error) {
                    console.error('Error loading auto-saved project:', error);
                }
            } else {
                // If no autoSavedProject, initialize with autoSaveEnabled: true and default values
                const projectData = {
                    autoSaveEnabled: true
                };
                localStorage.setItem('autoSavedProject', JSON.stringify(projectData));
                const autoSaveCheckbox = document.getElementById('autoSave');
                if (autoSaveCheckbox) {
                    autoSaveCheckbox.checked = true;
                }
                
                // Set default values for cable configuration
                document.getElementById('numCables').value = '1';
                document.getElementById('avgCableLength').value = '25';
                
                // Set default values for calculated mode
                const calcQtyInput = document.querySelector('#calculatedLengthMode .cable-qty');
                const calcLengthInput = document.querySelector('#calculatedLengthMode .cable-length');
                if (calcQtyInput) calcQtyInput.value = '1';
                if (calcLengthInput) calcLengthInput.value = '25';
                
                // Add event listeners to any newly created elements
                addEventListenersToLineItems();
                
                // Ensure the default cable mode is set correctly
                setCableLengthMode('average');
            }
            
            // Set default positions for collapsible sections
            // Summary is open by default, Time Breakdown is collapsed by default
            const resultsSection = document.getElementById('results');
            const breakdownSection = document.getElementById('breakdown');
            const cableConfigSection = document.getElementById('cableConfig');
            
            if (resultsSection) {
                resultsSection.classList.remove('collapsed'); // Ensure summary is open
            }
            if (breakdownSection) {
                breakdownSection.classList.add('collapsed'); // Ensure time breakdown is collapsed
            }
            if (cableConfigSection) {
                cableConfigSection.classList.add('expanded'); // Ensure cable config is open
            }
            
            calculate();
        });
        
        function addEventListenersToLineItems() {
            // Add event listeners to all existing line item inputs
            const lineItemInputs = document.querySelectorAll('.line-item input');
            lineItemInputs.forEach(input => {
                input.addEventListener('input', calculate);
                input.addEventListener('change', calculate);
            });
            
            // Add event listeners to cable configuration inputs (which may have labels)
            const cableConfigInputs = document.querySelectorAll('#numCables, #avgCableLength');
            cableConfigInputs.forEach(input => {
                // Remove any existing listeners first
                input.removeEventListener('input', calculate);
                input.removeEventListener('change', calculate);
                
                input.addEventListener('input', function() {
                    console.log('Cable config input changed:', input.id, input.value);
                    calculate();
                });
                input.addEventListener('change', function() {
                    console.log('Cable config change event:', input.id, input.value);
                    calculate();
                });
            });
            
            // Add event listeners to calculated mode cable inputs
            const calculatedCableInputs = document.querySelectorAll('.cable-length, .cable-qty');
            calculatedCableInputs.forEach(input => {
                // Remove any existing listeners first
                input.removeEventListener('input', calculate);
                input.removeEventListener('change', calculate);
                
                input.addEventListener('input', function() {
                    console.log('Calculated cable input changed:', input.className, input.value);
                    calculate();
                });
                input.addEventListener('change', function() {
                    console.log('Calculated cable change event:', input.className, input.value);
                    calculate();
                });
            });
        }
        
        // Reconciliation function to handle connectors and terminations
        function reconcileConnectorsAndTerminations() {
            const reconciliationTimestamp = new Date();
            const formatDate = reconciliationTimestamp.toLocaleDateString();
            const formatTime = reconciliationTimestamp.toLocaleTimeString();
            const isoTimestamp = reconciliationTimestamp.toISOString();
            
            var reconciliationReport = [];
            var totalTerms = parseInt(document.getElementById('totalTerminations').textContent) || 0;
            
            // Check for BNC and Cat6 connectors in vendor orders
            var bncConnectorsOrdered = 0;
            var cat6ConnectorsOrdered = 0;
            var bncTerminationsOrdered = 0;
            var cat6TerminationsOrdered = 0;
            
            // Scan all active vendor orders for connector/termination items
            for (let i = 1; i <= 3; i++) {
                if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].items) {
                    vendorPricing[i].items.forEach(item => {
                        const desc = item.desc.toLowerCase();
                        const qty = parseInt(item.qty) || 0;
                        
                        // Check for BNC connectors/terminations
                        if (desc.includes('bnc')) {
                            if (desc.includes('connector') || desc.includes('plug') || desc.includes('jack')) {
                                bncConnectorsOrdered += qty;
                            } else if (desc.includes('termination') || desc.includes('term')) {
                                bncTerminationsOrdered += qty;
                            } else {
                                // Generic BNC item - assume connectors
                                bncConnectorsOrdered += qty;
                            }
                        }
                        
                        // Check for Cat6 connectors/terminations
                        if (desc.includes('cat6') || desc.includes('rj45') || desc.includes('network')) {
                            if (desc.includes('connector') || desc.includes('plug') || desc.includes('jack')) {
                                cat6ConnectorsOrdered += qty;
                            } else if (desc.includes('termination') || desc.includes('term')) {
                                cat6TerminationsOrdered += qty;
                            } else {
                                // Generic Cat6 item - assume connectors
                                cat6ConnectorsOrdered += qty;
                            }
                        }
                    });
                }
            }
            
            // Calculate required connectors based on cable configuration
            var requiredConnectors = 0;
            var cableTypes = {};
            
            if (cableLengthMode === 'average') {
                const avgCableType = document.querySelector('#averageLengthMode .cable-type');
                if (avgCableType) {
                    const type = avgCableType.value;
                    const qty = parseInt(document.getElementById('numCables').value) || 0;
                    const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
                    cableTypes[type] = qty * termsPerCable;
                    requiredConnectors += qty * termsPerCable;
                }
            } else {
                // Calculated mode - check each line item
                document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                    const cableType = item.querySelector('.cable-type').value;
                    const qty = parseInt(item.querySelector('.cable-qty').value) || 1;
                    const length = parseInt(item.querySelector('.cable-length').value) || 0;
                    const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
                    const totalTerms = qty * termsPerCable;
                    
                    if (!cableTypes[cableType]) cableTypes[cableType] = 0;
                    cableTypes[cableType] += totalTerms;
                    requiredConnectors += totalTerms;
                });
            }
            
            // Generate reconciliation report with timestamp
            reconciliationReport.push('=== CONNECTOR/TERMINATION RECONCILIATION ===');
            reconciliationReport.push(`Reconciliation Date: ${formatDate}`);
            reconciliationReport.push(`Reconciliation Time: ${formatTime}`);
            reconciliationReport.push(`Project: ${document.getElementById('projectName').value || 'Unnamed Project'}`);
            reconciliationReport.push(`Vendor: ${currentVendor}`);
            reconciliationReport.push('');
            reconciliationReport.push(`Total terminations required: ${requiredConnectors}`);
            reconciliationReport.push('');
            
            // Check BNC requirements
            var bncRequired = 0;
            if (cableTypes['1855']) bncRequired += cableTypes['1855'];
            if (cableTypes['1505']) bncRequired += cableTypes['1505'];
            if (cableTypes['1694']) bncRequired += cableTypes['1694'];
            
            var reconciliationData = {
                timestamp: isoTimestamp,
                formatDate: formatDate,
                formatTime: formatTime,
                projectName: document.getElementById('projectName').value || 'Unnamed Project',
                vendor: currentVendor,
                totalRequired: requiredConnectors,
                bnc: {
                    required: bncRequired,
                    ordered: bncConnectorsOrdered + bncTerminationsOrdered,
                    status: bncRequired === 0 ? 'N/A' : 
                           (bncConnectorsOrdered + bncTerminationsOrdered < bncRequired) ? 'SHORTAGE' :
                           (bncConnectorsOrdered + bncTerminationsOrdered > bncRequired) ? 'OVERAGE' : 'MATCH'
                },
                cat6: {
                    required: 0,
                    ordered: cat6ConnectorsOrdered + cat6TerminationsOrdered,
                    status: 'N/A'
                }
            };
            
            if (bncRequired > 0) {
                reconciliationReport.push(`BNC Connectors/Terminations:`);
                reconciliationReport.push(`  Required: ${bncRequired}`);
                reconciliationReport.push(`  Ordered: ${bncConnectorsOrdered + bncTerminationsOrdered}`);
                if (bncConnectorsOrdered + bncTerminationsOrdered < bncRequired) {
                    reconciliationReport.push(`  ⚠️  NEED TO ORDER: ${bncRequired - (bncConnectorsOrdered + bncTerminationsOrdered)} more`);
                } else if (bncConnectorsOrdered + bncTerminationsOrdered > bncRequired) {
                    reconciliationReport.push(`  ℹ️  Over-ordered: ${(bncConnectorsOrdered + bncTerminationsOrdered) - bncRequired} extra`);
                } else {
                    reconciliationReport.push(`  ✅ Perfect match`);
                }
                reconciliationReport.push('');
            }
            
            // Check Cat6 requirements
            var cat6Required = 0;
            if (cableTypes['cat6']) cat6Required += cableTypes['cat6'];
            
            // Update cat6 data in reconciliation data
            reconciliationData.cat6.required = cat6Required;
            reconciliationData.cat6.status = cat6Required === 0 ? 'N/A' : 
                                           (cat6ConnectorsOrdered + cat6TerminationsOrdered < cat6Required) ? 'SHORTAGE' :
                                           (cat6ConnectorsOrdered + cat6TerminationsOrdered > cat6Required) ? 'OVERAGE' : 'MATCH';
            
            if (cat6Required > 0) {
                reconciliationReport.push(`Cat6 Connectors/Terminations:`);
                reconciliationReport.push(`  Required: ${cat6Required}`);
                reconciliationReport.push(`  Ordered: ${cat6ConnectorsOrdered + cat6TerminationsOrdered}`);
                if (cat6ConnectorsOrdered + cat6TerminationsOrdered < cat6Required) {
                    reconciliationReport.push(`  ⚠️  NEED TO ORDER: ${cat6Required - (cat6ConnectorsOrdered + cat6TerminationsOrdered)} more`);
                } else if (cat6ConnectorsOrdered + cat6TerminationsOrdered > cat6Required) {
                    reconciliationReport.push(`  ℹ️  Over-ordered: ${(cat6ConnectorsOrdered + cat6TerminationsOrdered) - cat6Required} extra`);
                } else {
                    reconciliationReport.push(`  ✅ Perfect match`);
                }
                reconciliationReport.push('');
            }
            
            // Save reconciliation to history
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                reconciliationHistory.push(reconciliationData);
                
                // Keep only last 50 reconciliations to avoid storage bloat
                if (reconciliationHistory.length > 50) {
                    reconciliationHistory.splice(0, reconciliationHistory.length - 50);
                }
                
                localStorage.setItem('reconciliationHistory', JSON.stringify(reconciliationHistory));
                console.log('Reconciliation saved to history:', reconciliationData);
            } catch (error) {
                console.error('Error saving reconciliation history:', error);
            }
            
            // Add footer with timestamp
            reconciliationReport.push('================================');
            reconciliationReport.push(`Generated: ${formatDate} at ${formatTime}`);
            reconciliationReport.push(`Timestamp: ${isoTimestamp}`);
            
            // Show reconciliation report
            alert(reconciliationReport.join('\n'));
        }
        
        // Toggle reconciliation section
        function toggleReconciliation() {
            const section = document.getElementById('reconciliationContent');
            const header = document.querySelector('#reconciliationSection h3');
            
            if (section.style.display === 'none' || !section.style.display) {
                section.style.display = 'block';
                header.style.background = '#34495e';
                header.style.color = 'white';
            } else {
                section.style.display = 'none';
                header.style.background = '';
                header.style.color = '';
            }
        }
        
        // Run reconciliation and display in tab
        function runReconciliationToTab() {
            const reconciliationTimestamp = new Date();
            const formatDate = reconciliationTimestamp.toLocaleDateString();
            const formatTime = reconciliationTimestamp.toLocaleTimeString();
            const isoTimestamp = reconciliationTimestamp.toISOString();
            
            var reconciliationReport = [];
            var totalTerms = parseInt(document.getElementById('totalTerminations').textContent) || 0;
            
            // Check for BNC and Cat6 connectors in vendor orders
            var bncConnectorsOrdered = 0;
            var cat6ConnectorsOrdered = 0;
            var bncTerminationsOrdered = 0;
            var cat6TerminationsOrdered = 0;
            
            // Scan all active vendor orders for connector/termination items
            for (let i = 1; i <= 3; i++) {
                if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].items) {
                    vendorPricing[i].items.forEach(item => {
                        const desc = item.desc.toLowerCase();
                        const qty = parseInt(item.qty) || 0;
                        
                        // Check for BNC connectors/terminations
                        if (desc.includes('bnc')) {
                            if (desc.includes('connector') || desc.includes('plug') || desc.includes('jack')) {
                                bncConnectorsOrdered += qty;
                            } else if (desc.includes('termination') || desc.includes('term')) {
                                bncTerminationsOrdered += qty;
                            } else {
                                // Generic BNC item - assume connectors
                                bncConnectorsOrdered += qty;
                            }
                        }
                        
                        // Check for Cat6 connectors/terminations
                        if (desc.includes('cat6') || desc.includes('rj45') || desc.includes('network')) {
                            if (desc.includes('connector') || desc.includes('plug') || desc.includes('jack')) {
                                cat6ConnectorsOrdered += qty;
                            } else if (desc.includes('termination') || desc.includes('term')) {
                                cat6TerminationsOrdered += qty;
                            } else {
                                // Generic Cat6 item - assume connectors
                                cat6ConnectorsOrdered += qty;
                            }
                        }
                    });
                }
            }
            
            // Calculate required connectors based on cable configuration
            var requiredConnectors = 0;
            var cableTypes = {};
            
            if (cableLengthMode === 'average') {
                const avgCableType = document.querySelector('#averageLengthMode .cable-type');
                if (avgCableType) {
                    const type = avgCableType.value;
                    const qty = parseInt(document.getElementById('numCables').value) || 0;
                    const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
                    cableTypes[type] = qty * termsPerCable;
                    requiredConnectors += qty * termsPerCable;
                }
            } else {
                // Calculated mode - check each line item
                document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                    const cableType = item.querySelector('.cable-type').value;
                    const qty = parseInt(item.querySelector('.cable-qty').value) || 1;
                    const length = parseInt(item.querySelector('.cable-length').value) || 0;
                    const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
                    const totalTerms = qty * termsPerCable;
                    
                    if (!cableTypes[cableType]) cableTypes[cableType] = 0;
                    cableTypes[cableType] += totalTerms;
                    requiredConnectors += totalTerms;
                });
            }
            
            // Check BNC requirements
            var bncRequired = 0;
            if (cableTypes['1855']) bncRequired += cableTypes['1855'];
            if (cableTypes['1505']) bncRequired += cableTypes['1505'];
            if (cableTypes['1694']) bncRequired += cableTypes['1694'];
            
            // Check Cat6 requirements
            var cat6Required = 0;
            if (cableTypes['cat6']) cat6Required += cableTypes['cat6'];
            
            // Check cable quantity mismatches
            var cableMismatchData = window.cableMismatchData || { hasMismatch: false };
            var hasCableMismatch = cableMismatchData.hasMismatch;
            
            // Determine overall status
            var hasShortages = false;
            var hasOverages = false;
            var hasIssues = false;
            var bncStatus = 'N/A';
            var cat6Status = 'N/A';
            
            if (bncRequired > 0) {
                if (bncConnectorsOrdered + bncTerminationsOrdered < bncRequired) {
                    bncStatus = 'SHORTAGE';
                    hasShortages = true;
                } else if (bncConnectorsOrdered + bncTerminationsOrdered > bncRequired) {
                    bncStatus = 'OVERAGE';
                    hasOverages = true;
                } else {
                    bncStatus = 'MATCH';
                }
            }
            
            if (cat6Required > 0) {
                if (cat6ConnectorsOrdered + cat6TerminationsOrdered < cat6Required) {
                    cat6Status = 'SHORTAGE';
                    hasShortages = true;
                } else if (cat6ConnectorsOrdered + cat6TerminationsOrdered > cat6Required) {
                    cat6Status = 'OVERAGE';
                    hasOverages = true;
                } else {
                    cat6Status = 'MATCH';
                }
            }
            
            // Include cable mismatch in overall status
            if (hasCableMismatch) {
                hasIssues = true;
            }
            
            // Update status indicator
            const statusElement = document.getElementById('reconciliationStatus');
            if (hasShortages || hasCableMismatch) {
                statusElement.textContent = hasShortages ? 'SHORTAGES' : 'ISSUES';
                statusElement.style.background = '#e74c3c';
            } else if (hasOverages) {
                statusElement.textContent = 'OVERAGES';
                statusElement.style.background = '#f39c12';
            } else {
                statusElement.textContent = 'ALL GOOD';
                statusElement.style.background = '#27ae60';
            }
            
            // Update quick status
            let quickStatus = '';
            if (hasShortages) {
                quickStatus = '⚠️ Shortages detected - items need to be ordered';
            } else if (hasCableMismatch) {
                quickStatus = '⚠️ Cable quantity mismatches detected';
            } else if (hasOverages) {
                quickStatus = 'ℹ️ Overages detected - extra items ordered';
            } else {
                quickStatus = '✅ Perfect match - all requirements met';
            }
            document.getElementById('reconciliationQuickStatus').textContent = quickStatus;
            
            // Generate reconciliation report with timestamp
            reconciliationReport.push('=== CONNECTOR/TERMINATION RECONCILIATION ===');
            reconciliationReport.push(`Reconciliation Date: ${formatDate}`);
            reconciliationReport.push(`Reconciliation Time: ${formatTime}`);
            reconciliationReport.push(`Project: ${document.getElementById('projectName').value || 'Unnamed Project'}`);
            reconciliationReport.push(`Vendor: ${currentVendor}`);
            reconciliationReport.push('');
            reconciliationReport.push(`Total terminations required: ${requiredConnectors}`);
            reconciliationReport.push('');
            
            if (bncRequired > 0) {
                reconciliationReport.push(`BNC Connectors/Terminations:`);
                reconciliationReport.push(`  Required: ${bncRequired}`);
                reconciliationReport.push(`  Ordered: ${bncConnectorsOrdered + bncTerminationsOrdered}`);
                if (bncConnectorsOrdered + bncTerminationsOrdered < bncRequired) {
                    reconciliationReport.push(`  ⚠️  NEED TO ORDER: ${bncRequired - (bncConnectorsOrdered + bncTerminationsOrdered)} more`);
                } else if (bncConnectorsOrdered + bncTerminationsOrdered > bncRequired) {
                    reconciliationReport.push(`  ℹ️  Over-ordered: ${(bncConnectorsOrdered + bncTerminationsOrdered) - bncRequired} extra`);
                } else {
                    reconciliationReport.push(`  ✅ Perfect match`);
                }
                reconciliationReport.push('');
            }
            
            if (cat6Required > 0) {
                reconciliationReport.push(`Cat6 Connectors/Terminations:`);
                reconciliationReport.push(`  Required: ${cat6Required}`);
                reconciliationReport.push(`  Ordered: ${cat6ConnectorsOrdered + cat6TerminationsOrdered}`);
                if (cat6ConnectorsOrdered + cat6TerminationsOrdered < cat6Required) {
                    reconciliationReport.push(`  ⚠️  NEED TO ORDER: ${cat6Required - (cat6ConnectorsOrdered + cat6TerminationsOrdered)} more`);
                } else if (cat6ConnectorsOrdered + cat6TerminationsOrdered > cat6Required) {
                    reconciliationReport.push(`  ℹ️  Over-ordered: ${(cat6ConnectorsOrdered + cat6TerminationsOrdered) - cat6Required} extra`);
                } else {
                    reconciliationReport.push(`  ✅ Perfect match`);
                }
                reconciliationReport.push('');
            }
            
            // Add cable quantity reconciliation
            if (hasCableMismatch && cableMismatchData.message) {
                reconciliationReport.push('=== CABLE QUANTITY RECONCILIATION ===');
                reconciliationReport.push(cableMismatchData.message);
                reconciliationReport.push('');
            }
            
            // Save reconciliation data to history
            var reconciliationData = {
                timestamp: isoTimestamp,
                formatDate: formatDate,
                formatTime: formatTime,
                projectName: document.getElementById('projectName').value || 'Unnamed Project',
                vendor: currentVendor,
                totalRequired: requiredConnectors,
                bnc: {
                    required: bncRequired,
                    ordered: bncConnectorsOrdered + bncTerminationsOrdered,
                    status: bncStatus
                },
                cat6: {
                    required: cat6Required,
                    ordered: cat6ConnectorsOrdered + cat6TerminationsOrdered,
                    status: cat6Status
                },
                cables: {
                    hasMismatch: hasCableMismatch,
                    totalOrdered: cableMismatchData.totalCableOrdered || 0,
                    spoolsRequired: cableMismatchData.spoolsRequired || 0,
                    status: hasCableMismatch ? 'MISMATCH' : 'OK'
                }
            };
            
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                reconciliationHistory.push(reconciliationData);
                
                // Keep only last 50 reconciliations to avoid storage bloat
                if (reconciliationHistory.length > 50) {
                    reconciliationHistory.splice(0, reconciliationHistory.length - 50);
                }
                
                localStorage.setItem('reconciliationHistory', JSON.stringify(reconciliationHistory));
                console.log('Reconciliation saved to history:', reconciliationData);
            } catch (error) {
                console.error('Error saving reconciliation history:', error);
            }
            
            // Add footer with timestamp
            reconciliationReport.push('================================');
            reconciliationReport.push(`Generated: ${formatDate} at ${formatTime}`);
            reconciliationReport.push(`Timestamp: ${isoTimestamp}`);
            
            // Display report in tab
            document.getElementById('reconciliationReport').textContent = reconciliationReport.join('\n');
            
            // Open the reconciliation tab if it's closed
            const section = document.getElementById('reconciliationContent');
            if (section.style.display === 'none' || !section.style.display) {
                toggleReconciliation();
            }
            
            // Hide history view and show report
            document.getElementById('reconciliationHistoryView').style.display = 'none';
            document.getElementById('reconciliationReport').style.display = 'block';
        }
        
        // Show reconciliation history in tab
        function showReconciliationHistory() {
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                
                if (!reconciliationHistory || reconciliationHistory.length === 0) {
                    document.getElementById('reconciliationHistoryList').textContent = 'No reconciliation history found. Run a reconciliation report first.';
                } else {
                    let historyReport = [];
                    historyReport.push(`=== RECONCILIATION HISTORY (${reconciliationHistory.length} total) ===`);
                    historyReport.push('');
                    
                    // Show last 15 reconciliations (most recent first)
                    const recentReconciliations = reconciliationHistory.slice(-15).reverse();
                    
                    recentReconciliations.forEach((recon, index) => {
                        historyReport.push(`${index + 1}. ${recon.formatDate} at ${recon.formatTime}`);
                        historyReport.push(`   Project: ${recon.projectName}`);
                        historyReport.push(`   Vendor: ${recon.vendor}`);
                        historyReport.push(`   Total Required: ${recon.totalRequired}`);
                        
                        if (recon.bnc && recon.bnc.required > 0) {
                            historyReport.push(`   BNC: ${recon.bnc.required} required, ${recon.bnc.ordered} ordered (${recon.bnc.status})`);
                        }
                        
                        if (recon.cat6 && recon.cat6.required > 0) {
                            historyReport.push(`   Cat6: ${recon.cat6.required} required, ${recon.cat6.ordered} ordered (${recon.cat6.status})`);
                        }
                        
                        if (recon.cables && recon.cables.hasMismatch) {
                            historyReport.push(`   Cables: ${recon.cables.totalOrdered}ft ordered, ${recon.cables.spoolsRequired} spools needed (${recon.cables.status})`);
                        }
                        
                        historyReport.push('');
                    });
                    
                    if (reconciliationHistory.length > 15) {
                        historyReport.push(`... and ${reconciliationHistory.length - 15} older records`);
                        historyReport.push('');
                    }
                    
                    historyReport.push('================================');
                    historyReport.push('Use "Export" button for complete CSV history');
                    
                    document.getElementById('reconciliationHistoryList').textContent = historyReport.join('\n');
                }
                
                // Open the reconciliation tab if it's closed
                const section = document.getElementById('reconciliationContent');
                if (section.style.display === 'none' || !section.style.display) {
                    toggleReconciliation();
                }
                
                // Show history view and hide report
                document.getElementById('reconciliationHistoryView').style.display = 'block';
                document.getElementById('reconciliationReport').style.display = 'none';
                
            } catch (error) {
                console.error('Error loading reconciliation history:', error);
                document.getElementById('reconciliationHistoryList').textContent = 'Error loading reconciliation history: ' + error.message;
            }
        }
        
        // Export reconciliation data as CSV
        function exportReconciliationCSV() {
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                
                var csvData = [];
                csvData.push('Reconciliation History Export');
                csvData.push('Generated on: ' + new Date().toLocaleDateString());
                csvData.push('');
                
                if (reconciliationHistory && reconciliationHistory.length > 0) {
                    csvData.push('Date,Time,Project,Vendor,Total Required,BNC Required,BNC Ordered,BNC Status,Cat6 Required,Cat6 Ordered,Cat6 Status,Cable Ordered,Cable Spools,Cable Status,ISO Timestamp');
                    
                    reconciliationHistory.forEach(recon => {
                        const cableOrdered = recon.cables ? recon.cables.totalOrdered : 0;
                        const cableSpools = recon.cables ? recon.cables.spoolsRequired : 0;
                        const cableStatus = recon.cables ? recon.cables.status : 'N/A';
                        csvData.push(`"${recon.formatDate}","${recon.formatTime}","${recon.projectName}","${recon.vendor}",${recon.totalRequired},${recon.bnc.required},${recon.bnc.ordered},"${recon.bnc.status}",${recon.cat6.required},${recon.cat6.ordered},"${recon.cat6.status}",${cableOrdered},${cableSpools},"${cableStatus}","${recon.timestamp}"`);
                    });
                } else {
                    csvData.push('No reconciliation history available');
                }
                
                var csvContent = csvData.join('\n');
                var blob = new Blob([csvContent], { type: 'text/csv' });
                var url = window.URL.createObjectURL(blob);
                
                var a = document.createElement('a');
                a.href = url;
                a.download = 'reconciliation_history.csv';
                a.click();
                
                window.URL.revokeObjectURL(url);
                
            } catch (error) {
                console.error('Error exporting reconciliation CSV:', error);
                alert('Error exporting reconciliation CSV: ' + error.message);
            }
        }
        
        // Function to view reconciliation history
        function viewReconciliationHistory() {
            try {
                const reconciliationHistory = JSON.parse(localStorage.getItem('reconciliationHistory') || '[]');
                
                if (!reconciliationHistory || reconciliationHistory.length === 0) {
                    alert('No reconciliation history found. Run a reconciliation report first.');
                    return;
                }
                
                let historyReport = [];
                historyReport.push('=== RECONCILIATION HISTORY ===');
                historyReport.push(`Total Records: ${reconciliationHistory.length}`);
                historyReport.push('');
                
                // Show last 10 reconciliations (most recent first)
                const recentReconciliations = reconciliationHistory.slice(-10).reverse();
                
                recentReconciliations.forEach((recon, index) => {
                    historyReport.push(`${index + 1}. ${recon.formatDate} at ${recon.formatTime}`);
                    historyReport.push(`   Project: ${recon.projectName}`);
                    historyReport.push(`   Vendor: ${recon.vendor}`);
                    historyReport.push(`   Total Required: ${recon.totalRequired}`);
                    
                    if (recon.bnc.required > 0) {
                        historyReport.push(`   BNC: ${recon.bnc.required} required, ${recon.bnc.ordered} ordered (${recon.bnc.status})`);
                    }
                    
                    if (recon.cat6.required > 0) {
                        historyReport.push(`   Cat6: ${recon.cat6.required} required, ${recon.cat6.ordered} ordered (${recon.cat6.status})`);
                    }
                    
                    historyReport.push('');
                });
                
                if (reconciliationHistory.length > 10) {
                    historyReport.push(`... and ${reconciliationHistory.length - 10} older records`);
                    historyReport.push('');
                }
                
                historyReport.push('================================');
                historyReport.push('Export CSV to see complete history');
                
                alert(historyReport.join('\n'));
                
            } catch (error) {
                console.error('Error loading reconciliation history:', error);
                alert('Error loading reconciliation history: ' + error.message);
            }
        }

        // === TEMPORARY/DEBUG FUNCTIONS FROM BACKUP ===
        function testFunction() {
            console.log('Test function is working!');
            alert('JavaScript is working!');
        }

        function testInventoryCalculation() {
            try {
                console.log('=== INVENTORY CALCULATION TEST ===');
                // Get current values
                const length = cableLengthMode === 'average' ? 
                    (parseInt(document.getElementById('avgCableLength').value) || 0) : 
                    (() => {
                        let total = 0;
                        document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                            const cableLength = parseFloat(item.querySelector('.cable-length').value) || 0;
                            const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                            total += (cableLength * qty);
                        });
                        return total;
                    })();
                const totalCableQuantity = cableLengthMode === 'average' ? 
                    (parseInt(document.getElementById('numCables').value) || 0) : 
                    (() => {
                        let total = 0;
                        document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                            const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                            total += qty;
                        });
                        return total;
                    })();
                const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
                const totalTerms = totalCableQuantity * termsPerCable;
                console.log('Current project needs:', {
                    totalCableNeeded: length,
                    totalConnectorsNeeded: totalTerms,
                    totalCableQuantity: totalCableQuantity,
                    termsPerCable: termsPerCable
                });
                // Check vendor orders
                let cableOrdered = 0;
                let connectorsOrdered = 0;
                for (let i = 1; i <= 3; i++) {
                    if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].items) {
                        console.log(`Checking vendor ${i} items:`, vendorPricing[i].items);
                        vendorPricing[i].items.forEach(item => {
                            const desc = item.desc.toLowerCase();
                            const qty = parseFloat(item.qty) || 1;
                            if (desc.includes('cable') || desc.includes('ft') || desc.includes('foot') || desc.includes('cat6') || desc.includes('cat5') || desc.includes('1855') || desc.includes('1505') || desc.includes('1694') || desc.includes('network') || desc.includes('box') || desc.includes('spool') || desc.includes('roll') || desc.includes('coax') || desc.includes('coaxial')) {
                                let cableLength = qty;
                                const lengthMatch = desc.match(/(\d+)\s*(?:ft|foot|feet|')/i);
                                if (lengthMatch) {
                                    cableLength = parseInt(lengthMatch[1]) * qty;
                                } else if (desc.includes('spool') || desc.includes('roll') || desc.includes('1000')) {
                                    cableLength = qty * 1000;
                                } else if (desc.includes('box')) {
                                    cableLength = qty * 1000;
                                } else if (desc.includes('500')) {
                                    cableLength = qty * 500;
                                } else if (desc.includes('250')) {
                                    cableLength = qty * 250;
                                }
                                cableOrdered += cableLength;
                                console.log('Cable item found:', item.desc, 'length:', cableLength, 'total cable ordered:', cableOrdered);
                            }
                            if (desc.includes('connector') || desc.includes('termination') || desc.includes('bnc') || desc.includes('cat6') || desc.includes('rj45') || desc.includes('plug') || desc.includes('jack') || desc.includes('end') || desc.includes('cap')) {
                                connectorsOrdered += qty;
                                console.log('Connector item found:', item.desc, 'qty:', qty, 'total connectors ordered:', connectorsOrdered);
                            }
                        });
                    }
                }
                // Calculate inventory usage
                const inventoryCableUsage = Math.max(0, length - cableOrdered);
                const inventoryConnectorUsage = Math.max(0, totalTerms - connectorsOrdered);
                console.log('Inventory calculation results:', {
                    cableOrdered: cableOrdered,
                    connectorsOrdered: connectorsOrdered,
                    inventoryCableUsage: inventoryCableUsage,
                    inventoryConnectorUsage: inventoryConnectorUsage
                });
                // Check inventory card display
                const inventoryUsageElement = document.getElementById('inventoryUsage');
                const inventoryDetailsElement = document.getElementById('inventoryDetails');
                console.log('Inventory card elements:', {
                    inventoryUsageElement: inventoryUsageElement,
                    inventoryDetailsElement: inventoryDetailsElement,
                    inventoryUsageText: inventoryUsageElement ? inventoryUsageElement.textContent : 'Element not found',
                    inventoryDetailsText: inventoryDetailsElement ? inventoryDetailsElement.textContent : 'Element not found'
                });
                // Test with a simple scenario
                console.log('=== TESTING SIMPLE SCENARIO ===');
                const testLength = 400; // 400ft needed
                const testCableOrdered = 250; // 250ft ordered
                const testInventoryCable = Math.max(0, testLength - testCableOrdered); // Should be 150ft
                const testConnectors = 100; // 100 connectors needed
                const testConnectorsOrdered = 60; // 60 connectors ordered
                const testInventoryConnectors = Math.max(0, testConnectors - testConnectorsOrdered); // Should be 40
                console.log('Test scenario:', {
                    testLength: testLength,
                    testCableOrdered: testCableOrdered,
                    testInventoryCable: testInventoryCable,
                    testConnectors: testConnectors,
                    testConnectorsOrdered: testConnectorsOrdered,
                    testInventoryConnectors: testInventoryConnectors
                });
                alert(`Inventory Test Results:\n\nCable needed: ${length}ft\nCable ordered: ${cableOrdered}ft\nCable from inventory: ${inventoryCableUsage}ft\n\nConnectors needed: ${totalTerms}\nConnectors ordered: ${connectorsOrdered}\nConnectors from inventory: ${inventoryConnectorUsage}\n\nTest Scenario:\n400ft needed, 250ft ordered = 150ft from inventory\n100 connectors needed, 60 ordered = 40 connectors from inventory\n\nCheck console for detailed debug info.`);
            } catch (error) {
                console.error('Error in testInventoryCalculation:', error);
                alert('Error during inventory test: ' + error.message);
            }
        }

        function createTestScenario() {
            console.log('=== CREATING TEST SCENARIO ===');
            // Set up a test scenario: 400ft cable needed, 250ft ordered = 150ft from inventory
            // 100 connectors needed, 60 ordered = 40 connectors from inventory
            // Set cable configuration
            if (cableLengthMode === 'average') {
                document.getElementById('numCables').value = '20';
                document.getElementById('avgCableLength').value = '20';
            } else {
                // Clear existing cable lengths and add test item
                const cableLengthsContainer = document.getElementById('cableLengths');
                cableLengthsContainer.innerHTML = '';
                addCableLength('1855', '20', '20'); // 20 cables of 20ft each = 400ft total
            }
            // Set terminations
            document.getElementById('terminationsPerCable').value = '5'; // 5 terminations per cable = 100 total
            // Set up vendor pricing for test
            vendorPricing[1] = {
                name: 'Test Vendor',
                active: true,
                items: [
                    { desc: '1855 Cable 250ft', qty: 1, cost: 100 },
                    { desc: 'BNC Connectors', qty: 60, cost: 2 }
                ]
            };
            // Update vendor display
            setVendor(1);
            // Set Setup Configuration values for inventory cost calculation
            document.getElementById('cableCostPerFoot').value = '0.50';
            document.getElementById('terminationCost').value = '1.00';
            console.log('Test scenario created. Running calculation...');
            calculate();
            alert('Test scenario created!\n\nProject needs: 400ft cable, 100 connectors\nVendor ordered: 250ft cable, 60 connectors\nExpected inventory: 150ft cable, 40 connectors\n\nCheck the Inventory Usage card and console for results.');
        }

        function debugInventoryDisplay() {
            console.log('=== INVENTORY DISPLAY DEBUG ===');
            // Check if elements exist
            const inventoryUsageElement = document.getElementById('inventoryUsage');
            const inventoryDetailsElement = document.getElementById('inventoryDetails');
            console.log('Element existence check:', {
                inventoryUsageElement: inventoryUsageElement ? 'Found' : 'NOT FOUND',
                inventoryDetailsElement: inventoryDetailsElement ? 'Found' : 'NOT FOUND'
            });
            if (!inventoryUsageElement || !inventoryDetailsElement) {
                alert('ERROR: Inventory card elements not found! Check HTML structure.');
                return;
            }
            // Check current display values
            const currentUsageText = inventoryUsageElement.textContent;
            const currentDetailsText = inventoryDetailsElement.textContent;
            console.log('Current display values:', {
                usageText: currentUsageText,
                detailsText: currentDetailsText
            });
            // Check if elements are visible
            const usageStyle = window.getComputedStyle(inventoryUsageElement);
            const detailsStyle = window.getComputedStyle(inventoryDetailsElement);
            console.log('Element visibility:', {
                usageDisplay: usageStyle.display,
                usageVisibility: usageStyle.visibility,
                usageOpacity: usageStyle.opacity,
                detailsDisplay: detailsStyle.display,
                detailsVisibility: detailsStyle.visibility,
                detailsOpacity: detailsStyle.opacity
            });
            // Check parent card visibility
            const inventoryCard = inventoryUsageElement.closest('.result-card');
            if (inventoryCard) {
                const cardStyle = window.getComputedStyle(inventoryCard);
                console.log('Parent card visibility:', {
                    display: cardStyle.display,
                    visibility: cardStyle.visibility,
                    opacity: cardStyle.opacity
                });
            }
            // Check global inventory variables
            console.log('Global inventory variables:', {
                globalInventoryCableUsage: globalInventoryCableUsage,
                globalInventoryConnectorUsage: globalInventoryConnectorUsage,
                globalTotalInventoryCost: globalTotalInventoryCost
            });
            // Check if calculate function is working
            console.log('Testing calculate function...');
            const originalUsageText = inventoryUsageElement.textContent;
            const originalDetailsText = inventoryDetailsElement.textContent;
            // Run calculate function
            calculate();
            // Check if values changed
            setTimeout(() => {
                const afterCalculateUsageText = inventoryUsageElement.textContent;
                const afterCalculateDetailsText = inventoryDetailsElement.textContent;
                console.log('Calculate function test:', {
                    beforeUsage: originalUsageText,
                    afterUsage: afterCalculateUsageText,
                    beforeDetails: originalDetailsText,
                    afterDetails: afterCalculateDetailsText,
                    usageChanged: originalUsageText !== afterCalculateUsageText,
                    detailsChanged: originalDetailsText !== afterCalculateDetailsText
                });
                if (originalUsageText === afterCalculateUsageText && originalDetailsText === afterCalculateDetailsText) {
                    console.log('WARNING: Calculate function did not update inventory display!');
                }
            }, 100);
            // Force update the display with test values
            console.log('Forcing display update with test values...');
            inventoryUsageElement.textContent = '$150';
            inventoryDetailsElement.textContent = '150ft cable, 40 connectors from inventory';
            // Check if the update worked
            setTimeout(() => {
                const newUsageText = inventoryUsageElement.textContent;
                const newDetailsText = inventoryDetailsElement.textContent;
                console.log('After forced update:', {
                    usageText: newUsageText,
                    detailsText: newDetailsText
                });
                if (newUsageText === '$150' && newDetailsText === '150ft cable, 40 connectors from inventory') {
                    alert('SUCCESS: Display update works! The issue is in the calculation or variable values.\n\nCheck console for detailed debug info.');
                } else {
                    alert('ERROR: Display update failed! There may be a CSS or JavaScript issue preventing updates.\n\nCheck console for detailed debug info.');
                }
            }, 100);
        }

        function forceInventoryUpdate() {
            console.log('=== FORCING INVENTORY UPDATE ===');
            // Get current values
            const length = cableLengthMode === 'average' ? 
                (parseInt(document.getElementById('avgCableLength').value) || 0) : 
                (() => {
                    let total = 0;
                    document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                        const cableLength = parseFloat(item.querySelector('.cable-length').value) || 0;
                        const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                        total += (cableLength * qty);
                    });
                    return total;
                })();
            const totalCableQuantity = cableLengthMode === 'average' ? 
                (parseInt(document.getElementById('numCables').value) || 0) : 
                (() => {
                    let total = 0;
                    document.querySelectorAll('#cableLengths .line-item').forEach(item => {
                        const qty = parseFloat(item.querySelector('.cable-qty').value) || 1;
                        total += qty;
                    });
                    return total;
                })();
            const termsPerCable = parseInt(document.getElementById('terminationsPerCable').value) || 2;
            const totalTerms = totalCableQuantity * termsPerCable;
            // Check vendor orders
            let cableOrdered = 0;
            let connectorsOrdered = 0;
            for (let i = 1; i <= 3; i++) {
                if (vendorPricing[i] && vendorPricing[i].active && vendorPricing[i].items) {
                    vendorPricing[i].items.forEach(item => {
                        const desc = item.desc.toLowerCase();
                        const qty = parseFloat(item.qty) || 1;
                        if (desc.includes('cable') || desc.includes('ft') || desc.includes('foot') || desc.includes('cat6') || desc.includes('cat5') || desc.includes('1855') || desc.includes('1505') || desc.includes('1694') || desc.includes('network') || desc.includes('box') || desc.includes('spool') || desc.includes('roll') || desc.includes('coax') || desc.includes('coaxial')) {
                            let cableLength = qty;
                            const lengthMatch = desc.match(/(\d+)\s*(?:ft|foot|feet|')/i);
                            if (lengthMatch) {
                                cableLength = parseInt(lengthMatch[1]) * qty;
                            } else if (desc.includes('spool') || desc.includes('roll') || desc.includes('1000')) {
                                cableLength = qty * 1000;
                            } else if (desc.includes('box')) {
                                cableLength = qty * 1000;
                            } else if (desc.includes('500')) {
                                cableLength = qty * 500;
                            } else if (desc.includes('250')) {
                                cableLength = qty * 250;
                            }
                            cableOrdered += cableLength;
                        }
                        if (desc.includes('connector') || desc.includes('termination') || desc.includes('bnc') || desc.includes('cat6') || desc.includes('rj45') || desc.includes('plug') || desc.includes('jack') || desc.includes('end') || desc.includes('cap')) {
                            connectorsOrdered += qty;
                        }
                    });
                }
            }
            // Calculate inventory usage
            const inventoryCableUsage = Math.max(0, length - cableOrdered);
            const inventoryConnectorUsage = Math.max(0, totalTerms - connectorsOrdered);
            // Get Setup Configuration values for cost calculation
            const cableCost = parseFloat(document.getElementById('cableCostPerFoot').value) || 0;
            const termCost = parseFloat(document.getElementById('terminationCost').value) || 0;
            const connectorWasteFactor = parseFloat(document.getElementById('connectorWasteFactor').value) || 0;
            // Calculate inventory costs
            const inventoryCableCost = inventoryCableUsage * cableCost;
            const inventoryConnectorCost = inventoryConnectorUsage * termCost * (1 + connectorWasteFactor / 100);
            const totalInventoryCost = inventoryCableCost + inventoryConnectorCost;
            // Update display
            const inventoryUsageElement = document.getElementById('inventoryUsage');
            const inventoryDetailsElement = document.getElementById('inventoryDetails');
            if (inventoryUsageElement) {
                inventoryUsageElement.textContent = '$' + totalInventoryCost.toFixed(0);
            }
            let inventoryDetailsText = '';
            if (inventoryCableUsage > 0 || inventoryConnectorUsage > 0) {
                const details = [];
                if (inventoryCableUsage > 0) {
                    details.push(inventoryCableUsage.toFixed(0) + 'ft cable');
                }
                if (inventoryConnectorUsage > 0) {
                    details.push(inventoryConnectorUsage.toFixed(0) + ' connectors');
                }
                inventoryDetailsText = details.join(', ') + ' from inventory';
            } else {
                inventoryDetailsText = 'all items ordered';
            }
            if (inventoryDetailsElement) {
                inventoryDetailsElement.textContent = inventoryDetailsText;
            }
            console.log('Forced inventory update:', {
                length: length,
                totalTerms: totalTerms,
                cableOrdered: cableOrdered,
                connectorsOrdered: connectorsOrdered,
                inventoryCableUsage: inventoryCableUsage,
                inventoryConnectorUsage: inventoryConnectorUsage,
                totalInventoryCost: totalInventoryCost,
                inventoryDetailsText: inventoryDetailsText
            });
            alert(`Inventory Update Complete!\n\nCable needed: ${length}ft\nCable ordered: ${cableOrdered}ft\nCable from inventory: ${inventoryCableUsage}ft\n\nConnectors needed: ${totalTerms}\nConnectors ordered: ${connectorsOrdered}\nConnectors from inventory: ${inventoryConnectorUsage}\n\nTotal inventory cost: $${totalInventoryCost.toFixed(0)}`);
        }

        function testToggleSection() {
            console.log('=== TESTING TOGGLE SECTION ===');
            // Test if function exists
            if (typeof toggleSection === 'function') {
                console.log('\u2705 toggleSection function is defined');
            } else {
                console.error('\u274c toggleSection function is NOT defined');
                return;
            }
            // Test if elements exist
            const testSectionId = 'cableConfig';
            const section = document.getElementById(testSectionId);
            const header = section ? section.previousElementSibling : null;
            const icon = header ? header.querySelector('.toggle-icon') : null;
            console.log('Element check:', {
                section: section ? 'Found' : 'NOT FOUND',
                header: header ? 'Found' : 'NOT FOUND',
                icon: icon ? 'Found' : 'NOT FOUND'
            });
            if (section && header && icon) {
                console.log('\u2705 All elements found, testing toggle...');
                toggleSection(testSectionId);
                setTimeout(() => {
                    const isExpanded = section.classList.contains('expanded');
                    const iconText = icon.textContent;
                    console.log('Toggle result:', {
                        isExpanded: isExpanded,
                        iconText: iconText
                    });
                    if (isExpanded) {
                        alert('\u2705 Toggle test SUCCESSFUL! Section expanded.');
                    } else {
                        alert('\u274c Toggle test FAILED! Section did not expand.');
                    }
                }, 100);
            } else {
                console.error('\u274c Missing elements for toggle test');
                alert('\u274c Toggle test FAILED! Missing required elements.');
            }
        }

        // === TEST: Reconciliation Function ===
        function testReconciliationFunction() {
            // Setup: Clear vendor orders and set a known scenario
            for (let i = 1; i <= 3; i++) {
                vendorPricing[i] = { name: `Vendor ${i}`, active: false, items: [] };
            }
            vendorPricing[1] = {
                name: 'Test Vendor',
                active: true,
                items: [
                    { desc: '1855 Cable 250ft', qty: 1, cost: 100 },
                    { desc: 'BNC Connectors', qty: 60, cost: 2 },
                    { desc: 'Cat6 Cable 1000ft', qty: 1, cost: 200 },
                    { desc: 'Cat6 RJ45 Plug', qty: 30, cost: 1 }
                ]
            };

            // Set cable configuration for average mode
            cableLengthMode = 'average';
            document.getElementById('numCables').value = '20';
            document.getElementById('avgCableLength').value = '20';
            document.getElementById('terminationsPerCable').value = '5';

            // Set total terminations for the test
            document.getElementById('totalTerminations').textContent = (20 * 5).toString();

            // Run reconciliation
            console.log('Running testReconciliationFunction...');
            reconcileConnectorsAndTerminations();
            alert('Test scenario for reconciliation complete. Check the reconciliation report and console for details.');
        }
        
        // Help Modal Functions
        const helpContent = {
            'vendors': {
                title: 'Vendor Orders Help Guide',
                content: `
                    <h4>Quick Guide - Keyword Matching:</h4>
                    <ul>
                        <li><strong>Cable spools:</strong> Include "spool", "reel", or "box" in the description to calculate based on spool length</li>
                        <li><strong>Connectors/terminations:</strong> Include "connector", "termination", "BNC", "Cat6", or "RJ45" in the description</li>
                        <li><strong>Inventory pricing:</strong> If cable/termination items aren't ordered here, in-stock/inventory pricing from Setup will be used as cost indication against standing reserves (not factored into total project cost)</li>
                    </ul>
                    
                    <h4>How to Use:</h4>
                    <ol>
                        <li>Enter a vendor name to activate the section</li>
                        <li>Add line items with descriptions, quantities, and costs</li>
                        <li>Use keywords in descriptions for automatic calculations</li>
                        <li>Toggle vendor active/inactive as needed</li>
                    </ol>
                    
                    <h4>Purpose:</h4>
                    <p>Use this section to enter line item orders from primary vendors (up to 3 vendors supported).</p>
                `
            },
            'supplies': {
                title: 'Supplies & Expendables Help Guide',
                content: `
                    <h4>What to Include:</h4>
                    <ul>
                        <li><strong>Cable management:</strong> Cable trays, conduits, cable ties, velcro straps</li>
                        <li><strong>Rack panels:</strong> Patch panels, blank panels, cable management panels</li>
                        <li><strong>Labeling supplies:</strong> Label makers, labels, cable markers, wire markers</li>
                        <li><strong>Installation supplies:</strong> Screws, anchors, mounting hardware</li>
                        <li><strong>Other expendables:</strong> Any consumable items needed for the project</li>
                    </ul>
                    
                    <h4>How to Use:</h4>
                    <ol>
                        <li>Enter a description of the supply or expendable item</li>
                        <li>Specify the quantity needed</li>
                        <li>Enter the total cost/amount for that quantity</li>
                        <li>Add more items as needed using the ➕ button</li>
                    </ol>
                    
                    <h4>Purpose:</h4>
                    <p>Track all non-cable, non-connector items needed to complete the project successfully.</p>
                `
            },
            'installation': {
                title: 'Installation Tasks Help Guide',
                content: `
                    <h4>Time Allocation:</h4>
                    <ul>
                        <li><strong>Lead Technician:</strong> 30% of total task time</li>
                        <li><strong>Standard Technicians:</strong> 70% of total task time</li>
                    </ul>
                    
                    <h4>Task Types:</h4>
                    <ul>
                        <li><strong>Cable Running:</strong> Time per cable to run from point A to point B</li>
                        <li><strong>Testing:</strong> Time per cable for connectivity and performance testing</li>
                        <li><strong>Labeling:</strong> Time per cable for proper identification labeling</li>
                        <li><strong>Rack Setup:</strong> Total time needed for rack preparation and organization</li>
                        <li><strong>Cleanup:</strong> Total time for site cleanup and restoration</li>
                    </ul>
                    
                    <h4>Purpose:</h4>
                    <p>Accurately estimate installation time and labor costs based on project complexity and team composition.</p>
                `
            }
        };
        
        function showHelp(topic) {
            const help = helpContent[topic];
            if (help) {
                document.getElementById('helpModalTitle').textContent = help.title;
                document.getElementById('helpModalBody').innerHTML = help.content;
                document.getElementById('helpModal').style.display = 'flex';
            }
        }
        
        function showVendorHelp() {
            showHelp('vendors');
        }
        
        function closeHelpModal() {
            document.getElementById('helpModal').style.display = 'none';
        }
        
        // Close modal when clicking outside of it
        document.getElementById('helpModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeHelpModal();
            }
        });
        
        // Initialize page components
        setTimeout(() => {
            initializeCableTypeColors();
            // Force cable type width override and apply colors
            const cableTypes = document.querySelectorAll('.cable-type');
            cableTypes.forEach(select => {
                select.style.width = '80px';
                select.style.minWidth = '80px';
                // Apply initial color
                updateCableTypeColor(select);
            });
            
            // Initialize project history logging
            logProjectChange('Application Started', 'TEdevProjectCalc application loaded and initialized');
        }, 100); // Small delay to ensure DOM is ready
    </script>
</body>
</html>
